# compiler: R8
# compiler_version: 1.5.69
# min_api: 14
# pg_map_id: 920e89e
com.badlogic.gdx.Application -> a.a.a.a:
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> a
    void error(java.lang.String,java.lang.String) -> a
    com.badlogic.gdx.Application$ApplicationType getType() -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void postRunnable(java.lang.Runnable) -> a
    com.badlogic.gdx.Graphics getGraphics() -> b
    void log(java.lang.String,java.lang.String) -> b
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> b
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> c
com.badlogic.gdx.Application$ApplicationType -> a.a.a.a$a:
    com.badlogic.gdx.Application$ApplicationType Android -> a
    com.badlogic.gdx.Application$ApplicationType HeadlessDesktop -> c
    com.badlogic.gdx.Application$ApplicationType Desktop -> b
    com.badlogic.gdx.Application$ApplicationType[] $VALUES -> g
    com.badlogic.gdx.Application$ApplicationType WebGL -> e
    com.badlogic.gdx.Application$ApplicationType Applet -> d
    com.badlogic.gdx.Application$ApplicationType iOS -> f
com.badlogic.gdx.ApplicationListener -> a.a.a.b:
    void dispose() -> a
    void resize(int,int) -> a
    void resume() -> b
    void pause() -> c
    void create() -> d
    void render() -> e
com.badlogic.gdx.ApplicationLogger -> a.a.a.c:
    void error(java.lang.String,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void log(java.lang.String,java.lang.String) -> b
com.badlogic.gdx.Audio -> a.a.a.d:
com.badlogic.gdx.Files -> a.a.a.e:
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> a
    java.lang.String getLocalStoragePath() -> a
    java.lang.String getExternalStoragePath() -> b
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
com.badlogic.gdx.Files$FileType -> a.a.a.e$a:
    com.badlogic.gdx.Files$FileType[] $VALUES -> f
    com.badlogic.gdx.Files$FileType Local -> e
    com.badlogic.gdx.Files$FileType Absolute -> d
    com.badlogic.gdx.Files$FileType External -> c
    com.badlogic.gdx.Files$FileType Internal -> b
    com.badlogic.gdx.Files$FileType Classpath -> a
com.badlogic.gdx.Game -> a.a.a.f:
    com.badlogic.gdx.Screen screen -> a
    void dispose() -> a
    void resize(int,int) -> a
    void setScreen(com.badlogic.gdx.Screen) -> a
    void resume() -> b
    void pause() -> c
    void render() -> e
com.badlogic.gdx.Gdx -> a.a.a.g:
    com.badlogic.gdx.graphics.GL30 gl30 -> g
    com.badlogic.gdx.graphics.GL20 gl20 -> f
    com.badlogic.gdx.Graphics graphics -> b
    com.badlogic.gdx.graphics.GL20 gl -> e
    com.badlogic.gdx.Input input -> c
    com.badlogic.gdx.Application app -> a
    com.badlogic.gdx.Files files -> d
com.badlogic.gdx.Graphics -> a.a.a.h:
    boolean supportsExtension(java.lang.String) -> a
    int getWidth() -> b
    int getHeight() -> c
    int getFramesPerSecond() -> d
    boolean isGL30Available() -> e
    int getBackBufferHeight() -> f
    int getBackBufferWidth() -> g
    com.badlogic.gdx.Graphics$DisplayMode getDisplayMode() -> h
    void requestRendering() -> i
    float getDeltaTime() -> j
com.badlogic.gdx.Graphics$BufferFormat -> a.a.a.h$a:
    int stencil -> f
    int samples -> g
    int a -> d
    int depth -> e
    boolean coverageSampling -> h
    int g -> b
    int b -> c
    int r -> a
com.badlogic.gdx.Graphics$DisplayMode -> a.a.a.h$b:
    int bitsPerPixel -> d
    int height -> b
    int refreshRate -> c
    int width -> a
com.badlogic.gdx.Input -> a.a.a.i:
    boolean isTouched(int) -> a
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
    long getCurrentEventTime() -> d
    int getX() -> e
    int getY() -> f
com.badlogic.gdx.Input$OnscreenKeyboardType -> a.a.a.i$a:
    com.badlogic.gdx.Input$OnscreenKeyboardType Default -> a
    com.badlogic.gdx.Input$OnscreenKeyboardType URI -> f
    com.badlogic.gdx.Input$OnscreenKeyboardType PhonePad -> c
    com.badlogic.gdx.Input$OnscreenKeyboardType NumberPad -> b
    com.badlogic.gdx.Input$OnscreenKeyboardType[] $VALUES -> g
    com.badlogic.gdx.Input$OnscreenKeyboardType Password -> e
    com.badlogic.gdx.Input$OnscreenKeyboardType Email -> d
com.badlogic.gdx.Input$Orientation -> a.a.a.i$b:
    com.badlogic.gdx.Input$Orientation Landscape -> a
    com.badlogic.gdx.Input$Orientation[] $VALUES -> c
    com.badlogic.gdx.Input$Orientation Portrait -> b
com.badlogic.gdx.InputAdapter -> a.a.a.j:
    boolean keyDown(int) -> a
    boolean keyTyped(char) -> a
    boolean mouseMoved(int,int) -> a
    boolean scrolled(float,float) -> a
    boolean keyUp(int) -> b
com.badlogic.gdx.InputProcessor -> a.a.a.k:
    boolean keyDown(int) -> a
    boolean keyTyped(char) -> a
    boolean mouseMoved(int,int) -> a
    boolean scrolled(float,float) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean keyUp(int) -> b
    boolean touchUp(int,int,int,int) -> b
com.badlogic.gdx.LifecycleListener -> a.a.a.l:
    void dispose() -> a
    void resume() -> b
    void pause() -> c
com.badlogic.gdx.Net -> a.a.a.m:
com.badlogic.gdx.Screen -> a.a.a.n:
    void hide() -> a
    void render(float) -> a
    void resize(int,int) -> a
    void resume() -> b
    void pause() -> c
    void show() -> d
com.badlogic.gdx.assets.AssetManager -> a.a.a.o.a:
    void finishLoading() -> r
com.badlogic.gdx.audio.Music -> a.a.a.p.a:
com.badlogic.gdx.audio.Music$OnCompletionListener -> a.a.a.p.a$a:
    void onCompletion(com.badlogic.gdx.audio.Music) -> a
com.badlogic.gdx.backends.android.AndroidApplication -> a.a.a.q.a.a:
    com.badlogic.gdx.backends.android.AndroidNet net -> e
    boolean useImmersiveMode -> o
    int logLevel -> m
    boolean hideStatusBar -> p
    com.badlogic.gdx.backends.android.AndroidInput input -> b
    com.badlogic.gdx.utils.SnapshotArray lifecycleListeners -> k
    com.badlogic.gdx.backends.android.AndroidFiles files -> d
    com.badlogic.gdx.backends.android.AndroidAudio audio -> c
    boolean isWaitingForAudio -> r
    android.os.Handler handler -> g
    com.badlogic.gdx.utils.Array androidEventListeners -> l
    com.badlogic.gdx.ApplicationLogger applicationLogger -> n
    com.badlogic.gdx.utils.Array executedRunnables -> j
    com.badlogic.gdx.ApplicationListener listener -> f
    boolean firstResume -> h
    com.badlogic.gdx.utils.Array runnables -> i
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> a
    int wasFocusChanged -> q
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> a
    com.badlogic.gdx.backends.android.AndroidAudio createAudio(android.content.Context,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    com.badlogic.gdx.backends.android.AndroidInput createInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    void error(java.lang.String,java.lang.String) -> a
    com.badlogic.gdx.Application$ApplicationType getType() -> a
    void init(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,boolean) -> a
    void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void postRunnable(java.lang.Runnable) -> a
    void setApplicationLogger(com.badlogic.gdx.ApplicationLogger) -> a
    void useImmersiveMode(boolean) -> a
    void createWakeLock(boolean) -> b
    com.badlogic.gdx.Graphics getGraphics() -> b
    void log(java.lang.String,java.lang.String) -> b
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> b
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> c
    void hideStatusBar(boolean) -> c
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> d
    com.badlogic.gdx.utils.Array getRunnables() -> e
    android.content.Context getContext() -> f
    android.view.Window getApplicationWindow() -> g
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> h
    com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners() -> i
    android.widget.FrameLayout$LayoutParams createLayoutParams() -> j
    com.badlogic.gdx.ApplicationLogger getApplicationLogger() -> k
    com.badlogic.gdx.Audio getAudio() -> l
    com.badlogic.gdx.Files getFiles() -> m
    com.badlogic.gdx.Net getNet() -> n
    int getVersion() -> o
com.badlogic.gdx.backends.android.AndroidApplication$1 -> a.a.a.q.a.a$a:
    com.badlogic.gdx.backends.android.AndroidApplication this$0 -> a
    void dispose() -> a
    void resume() -> b
    void pause() -> c
com.badlogic.gdx.backends.android.AndroidApplicationBase -> a.a.a.q.a.b:
    void useImmersiveMode(boolean) -> a
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> d
    com.badlogic.gdx.utils.Array getRunnables() -> e
    android.content.Context getContext() -> f
    android.view.Window getApplicationWindow() -> g
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> h
    com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners() -> i
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration -> a.a.a.q.a.c:
    boolean useWakelock -> n
    int sensorDelay -> l
    boolean hideStatusBar -> o
    int touchSleepTime -> m
    boolean disableAudio -> p
    boolean useGyroscope -> i
    boolean useCompass -> j
    boolean useRotationVectorSensor -> k
    int stencil -> f
    int numSamples -> g
    int a -> d
    int depth -> e
    int g -> b
    int b -> c
    boolean useImmersiveMode -> s
    int r -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> r
    boolean useGL30 -> t
    boolean useAccelerometer -> h
    int maxNetThreads -> u
    int maxSimultaneousSounds -> q
com.badlogic.gdx.backends.android.AndroidApplicationLogger -> a.a.a.q.a.d:
    void error(java.lang.String,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void log(java.lang.String,java.lang.String) -> b
com.badlogic.gdx.backends.android.AndroidAudio -> a.a.a.q.a.e:
    void notifyMusicDisposed(com.badlogic.gdx.backends.android.AndroidMusic) -> a
    void resume() -> b
    void pause() -> c
com.badlogic.gdx.backends.android.AndroidClipboard -> a.a.a.q.a.f:
com.badlogic.gdx.backends.android.AndroidEventListener -> a.a.a.q.a.g:
    void onActivityResult(int,int,android.content.Intent) -> a
com.badlogic.gdx.backends.android.AndroidFileHandle -> a.a.a.q.a.h:
    android.content.res.AssetManager assets -> c
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    java.io.File file() -> b
    long length() -> c
    com.badlogic.gdx.files.FileHandle parent() -> f
    java.io.InputStream read() -> h
com.badlogic.gdx.backends.android.AndroidFiles -> a.a.a.q.a.i:
    com.badlogic.gdx.backends.android.ZipResourceFile expansionFile -> d
    android.content.res.AssetManager assets -> c
    java.lang.String externalFilesPath -> a
    java.lang.String localpath -> b
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> a
    java.lang.String getLocalStoragePath() -> a
    com.badlogic.gdx.files.FileHandle getZipFileHandleIfExists(com.badlogic.gdx.files.FileHandle,java.lang.String) -> a
    java.lang.String getExternalStoragePath() -> b
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    com.badlogic.gdx.backends.android.ZipResourceFile getExpansionFile() -> c
com.badlogic.gdx.backends.android.AndroidGL20 -> a.a.a.q.a.j:
    int[] ints2 -> b
    int[] ints3 -> c
    int[] ints -> a
    byte[] buffer -> d
    void glBindFramebuffer(int,int) -> a
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> a
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glDepthMask(boolean) -> a
    void glDrawArrays(int,int,int) -> a
    void glEnable(int) -> a
    int glGenBuffer() -> a
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> a
    void glGetFloatv(int,java.nio.FloatBuffer) -> a
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> a
    void glShaderSource(int,java.lang.String) -> a
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glTexParameterf(int,int,float) -> a
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> a
    void glAttachShader(int,int) -> b
    int glCheckFramebufferStatus(int) -> b
    void glDrawElements(int,int,int,java.nio.Buffer) -> b
    void glFramebufferTexture2D(int,int,int,int,int) -> b
    int glGenRenderbuffer() -> b
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> b
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> b
    int glGetUniformLocation(int,java.lang.String) -> b
    void glTexParameteri(int,int,int) -> b
    void glViewport(int,int,int,int) -> b
    void glBindRenderbuffer(int,int) -> c
    void glBlendFuncSeparate(int,int,int,int) -> c
    int glGenTexture() -> c
    int glGetAttribLocation(int,java.lang.String) -> c
    void glGetIntegerv(int,java.nio.IntBuffer) -> c
    void glUseProgram(int) -> c
    int glCreateProgram() -> d
    void glDrawElements(int,int,int,int) -> d
    void glGenerateMipmap(int) -> d
    void glUniform1i(int,int) -> d
    void glBindBuffer(int,int) -> e
    void glFramebufferRenderbuffer(int,int,int,int) -> e
    int glGenFramebuffer() -> e
    void glLinkProgram(int) -> e
    void glDeleteRenderbuffer(int) -> f
    void glPixelStorei(int,int) -> f
    void glScissor(int,int,int,int) -> f
    void glBindTexture(int,int) -> g
    java.lang.String glGetShaderInfoLog(int) -> g
    void glRenderbufferStorage(int,int,int,int) -> g
    java.lang.String glGetProgramInfoLog(int) -> h
    void glEnableVertexAttribArray(int) -> i
    java.lang.String glGetString(int) -> j
    void glClear(int) -> k
    void glDeleteFramebuffer(int) -> l
    void glDisable(int) -> m
    void glDisableVertexAttribArray(int) -> n
    int glCreateShader(int) -> o
    void glDeleteTexture(int) -> q
    void glCompileShader(int) -> r
    void glDeleteBuffer(int) -> s
com.badlogic.gdx.backends.android.AndroidGL30 -> a.a.a.q.a.k:
    void glDrawArraysInstanced(int,int,int,int) -> a
    void glDrawBuffers(int,java.nio.IntBuffer) -> a
    void glDrawElementsInstanced(int,int,int,int,int) -> a
    void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glGenVertexArrays(int,java.nio.IntBuffer) -> b
    void glBindVertexArray(int) -> p
com.badlogic.gdx.backends.android.AndroidGraphics -> a.a.a.q.a.l:
    int fps -> n
    int[] value -> v
    long lastFrameTime -> i
    float deltaTime -> j
    long frameId -> l
    boolean created -> o
    java.lang.String extensions -> h
    long frameStart -> k
    int frames -> m
    boolean running -> p
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 view -> a
    com.badlogic.gdx.graphics.GL30 gl30 -> f
    com.badlogic.gdx.graphics.GL20 gl20 -> e
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> t
    boolean isContinuous -> u
    boolean enforceContinuousRendering -> x
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> d
    int width -> b
    boolean pause -> q
    int height -> c
    boolean resume -> r
    boolean destroy -> s
    com.badlogic.gdx.graphics.glutils.GLVersion glVersion -> g
    java.lang.Object synch -> w
    boolean checkGL20() -> a
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 createGLSurfaceView(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> a
    int getAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
    void logConfig(javax.microedition.khronos.egl.EGLConfig) -> a
    void setContinuousRendering(boolean) -> a
    void setupGL(javax.microedition.khronos.opengles.GL10) -> a
    boolean supportsExtension(java.lang.String) -> a
    int getWidth() -> b
    int getHeight() -> c
    int getFramesPerSecond() -> d
    boolean isGL30Available() -> e
    int getBackBufferHeight() -> f
    int getBackBufferWidth() -> g
    com.badlogic.gdx.Graphics$DisplayMode getDisplayMode() -> h
    void requestRendering() -> i
    float getDeltaTime() -> j
    void clearManagedCaches() -> k
    void destroy() -> l
    android.opengl.GLSurfaceView$EGLConfigChooser getEglConfigChooser() -> m
    android.view.View getView() -> n
    boolean isContinuousRendering() -> o
    void logManagedCachesStatus() -> p
    void onPauseGLSurfaceView() -> q
    void onResumeGLSurfaceView() -> r
    void pause() -> s
    void preserveEGLContextOnPause() -> t
    void resume() -> u
    void updatePpi() -> v
    void updateSafeAreaInsets() -> w
com.badlogic.gdx.backends.android.AndroidGraphics$1 -> a.a.a.q.a.l$a:
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> a
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode -> a.a.a.q.a.l$b:
com.badlogic.gdx.backends.android.AndroidInput -> a.a.a.q.a.m:
    void onPause() -> a
    void setKeyboardAvailable(boolean) -> a
    void processEvents() -> b
    void onResume() -> c
com.badlogic.gdx.backends.android.AndroidMouseHandler -> a.a.a.q.a.n:
    int deltaY -> b
    int deltaX -> a
    boolean onGenericMotion(android.view.MotionEvent,com.badlogic.gdx.backends.android.DefaultAndroidInput) -> a
    void postTouchEvent(com.badlogic.gdx.backends.android.DefaultAndroidInput,int,int,int,int,int,long) -> a
com.badlogic.gdx.backends.android.AndroidMusic -> a.a.a.q.a.o:
    com.badlogic.gdx.backends.android.AndroidAudio audio -> a
    com.badlogic.gdx.audio.Music$OnCompletionListener onCompletionListener -> e
    android.media.MediaPlayer player -> b
    boolean isPrepared -> c
    boolean wasPlaying -> d
    void dispose() -> a
    boolean isPlaying() -> b
    void pause() -> c
    void play() -> d
com.badlogic.gdx.backends.android.AndroidMusic$1 -> a.a.a.q.a.o$a:
    com.badlogic.gdx.backends.android.AndroidMusic this$0 -> a
com.badlogic.gdx.backends.android.AndroidNet -> a.a.a.q.a.p:
com.badlogic.gdx.backends.android.AndroidTouchHandler -> a.a.a.q.a.q:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.DefaultAndroidInput) -> a
    void postTouchEvent(com.badlogic.gdx.backends.android.DefaultAndroidInput,int,int,int,int,int,long) -> a
    boolean supportsMultitouch(android.content.Context) -> a
    int toGdxButton(int) -> a
com.badlogic.gdx.backends.android.AndroidVisibilityListener -> a.a.a.q.a.r:
    void createListener(com.badlogic.gdx.backends.android.AndroidApplicationBase) -> a
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1 -> a.a.a.q.a.r$a:
    com.badlogic.gdx.backends.android.AndroidApplicationBase val$application -> a
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1$1 -> a.a.a.q.a.r$a$a:
    com.badlogic.gdx.backends.android.AndroidVisibilityListener$1 this$1 -> a
com.badlogic.gdx.backends.android.AndroidZipFileHandle -> a.a.a.q.a.s:
    java.lang.String path -> g
    long fdLength -> e
    com.badlogic.gdx.backends.android.ZipResourceFile expansionFile -> f
    boolean hasAssetFd -> d
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    long length() -> c
    com.badlogic.gdx.files.FileHandle parent() -> f
    java.io.InputStream read() -> h
    java.lang.String getPath() -> k
    void initialize() -> l
com.badlogic.gdx.backends.android.DefaultAndroidAudio -> a.a.a.q.a.t:
    java.util.List musics -> b
    android.media.SoundPool soundPool -> a
    void dispose() -> a
    void notifyMusicDisposed(com.badlogic.gdx.backends.android.AndroidMusic) -> a
    void resume() -> b
    void pause() -> c
com.badlogic.gdx.backends.android.DefaultAndroidInput -> a.a.a.q.a.u:
    int keyCount -> n
    long currentEventTimeStamp -> J
    com.badlogic.gdx.utils.Pool usedTouchEvents -> b
    com.badlogic.gdx.Input$Orientation nativeOrientation -> I
    com.badlogic.gdx.backends.android.AndroidMouseHandler mouseHandler -> P
    com.badlogic.gdx.utils.IntSet keysToCatch -> A
    boolean[] justPressedKeys -> q
    float[] rotationVectorValues -> E
    java.util.ArrayList touchEvents -> e
    boolean[] keys -> o
    java.util.ArrayList keyListeners -> c
    int[] touchX -> f
    boolean[] touched -> j
    int[] deltaX -> h
    android.hardware.SensorEventListener gyroscopeListener -> L
    float[] gyroscopeValues -> v
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> H
    int[] realId -> l
    boolean rotationVectorAvailable -> C
    com.badlogic.gdx.utils.Pool usedKeyEvents -> a
    float[] pressure -> m
    com.badlogic.gdx.Application app -> w
    com.badlogic.gdx.backends.android.AndroidTouchHandler touchHandler -> y
    boolean keyJustPressed -> p
    com.badlogic.gdx.InputProcessor processor -> G
    android.hardware.SensorEventListener rotationVectorListener -> N
    boolean[] justPressedButtons -> r
    java.util.ArrayList keyEvents -> d
    float[] magneticFieldValues -> D
    boolean requestFocus -> Q
    boolean accelerometerAvailable -> t
    java.util.ArrayList genericMotionListeners -> O
    int[] touchY -> g
    int[] deltaY -> i
    int sleepTime -> z
    android.hardware.SensorEventListener accelerometerListener -> K
    android.hardware.SensorManager manager -> s
    android.hardware.SensorEventListener compassListener -> M
    float[] accelerometerValues -> u
    android.content.Context context -> x
    boolean justTouched -> F
    int[] button -> k
    boolean compassAvailable -> B
    int getAndroidInputType(com.badlogic.gdx.Input$OnscreenKeyboardType) -> a
    boolean isTouched(int) -> a
    void onPause() -> a
    float[] resize(float[]) -> a
    int[] resize(int[]) -> a
    boolean[] resize(boolean[]) -> a
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
    void setKeyboardAvailable(boolean) -> a
    int lookUpPointerIndex(int) -> b
    void processEvents() -> b
    void onResume() -> c
    long getCurrentEventTime() -> d
    int getX() -> e
    int getY() -> f
    int getFreePointerIndex() -> g
    int getRotation() -> h
    void registerSensorListeners() -> i
    void unregisterSensorListeners() -> j
com.badlogic.gdx.backends.android.DefaultAndroidInput$1 -> a.a.a.q.a.u$a:
    com.badlogic.gdx.backends.android.DefaultAndroidInput$KeyEvent newObject() -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.backends.android.DefaultAndroidInput$2 -> a.a.a.q.a.u$b:
    com.badlogic.gdx.backends.android.DefaultAndroidInput$TouchEvent newObject() -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.backends.android.DefaultAndroidInput$5 -> a.a.a.q.a.u$c:
    int[] $SwitchMap$com$badlogic$gdx$Input$OnscreenKeyboardType -> a
com.badlogic.gdx.backends.android.DefaultAndroidInput$KeyEvent -> a.a.a.q.a.u$d:
    long timeStamp -> a
    int type -> b
    char keyChar -> d
    int keyCode -> c
com.badlogic.gdx.backends.android.DefaultAndroidInput$SensorListener -> a.a.a.q.a.u$e:
    com.badlogic.gdx.backends.android.DefaultAndroidInput this$0 -> a
com.badlogic.gdx.backends.android.DefaultAndroidInput$TouchEvent -> a.a.a.q.a.u$f:
    int pointer -> h
    int scrollAmountY -> f
    long timeStamp -> a
    int button -> g
    int y -> d
    int scrollAmountX -> e
    int type -> b
    int x -> c
com.badlogic.gdx.backends.android.ZipResourceFile -> a.a.a.q.a.v:
    android.content.res.AssetFileDescriptor getAssetFileDescriptor(java.lang.String) -> a
    java.io.InputStream getInputStream(java.lang.String) -> b
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy -> a.a.a.q.a.w.a:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 -> a.a.a.q.a.w.b:
    int targetGLESVersion -> d
    java.lang.String TAG -> c
    com.badlogic.gdx.Input$OnscreenKeyboardType onscreenKeyboardType -> b
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> a
    boolean checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> a
    void init(boolean,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1 -> a.a.a.q.a.w.b$a:
    void sendDownUpKeyEventForBackwardCompatibility(int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser -> a.a.a.q.a.w.b$b:
    int[] mValue -> g
    int[] s_configAttribs2 -> i
    int EGL_OPENGL_ES2_BIT -> h
    int mStencilSize -> f
    int mAlphaSize -> d
    int mDepthSize -> e
    int mGreenSize -> b
    int mBlueSize -> c
    int mRedSize -> a
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory -> a.a.a.q.a.w.b$c:
    int EGL_CONTEXT_CLIENT_VERSION -> a
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser -> a.a.a.q.a.w.c:
    int[] mConfigAttribs -> h
    int[] mValue -> i
    int mStencilSize -> f
    int mNumSamples -> g
    int mAlphaSize -> d
    int mDepthSize -> e
    int mGreenSize -> b
    int mBlueSize -> c
    int mRedSize -> a
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy -> a.a.a.q.a.w.d:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension -> a.a.a.q.a.w.d$a:
    int height -> b
    int width -> a
com.badlogic.gdx.files.FileHandle -> a.a.a.r.a:
    java.io.File file -> a
    com.badlogic.gdx.Files$FileType type -> b
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    java.lang.String extension() -> a
    java.io.File file() -> b
    long length() -> c
    java.lang.String name() -> d
    java.lang.String nameWithoutExtension() -> e
    com.badlogic.gdx.files.FileHandle parent() -> f
    java.lang.String path() -> g
    java.io.InputStream read() -> h
    byte[] readBytes() -> i
    com.badlogic.gdx.Files$FileType type() -> j
    int estimateLength() -> k
com.badlogic.gdx.graphics.Camera -> a.a.a.s.a:
    float viewportHeight -> k
    float viewportWidth -> j
    float far -> i
    float near -> h
    com.badlogic.gdx.math.Vector3 tmpVec -> m
    com.badlogic.gdx.math.Matrix4 projection -> d
    com.badlogic.gdx.math.Frustum frustum -> l
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 up -> c
    com.badlogic.gdx.math.Matrix4 invProjectionView -> g
    com.badlogic.gdx.math.Vector3 position -> a
    com.badlogic.gdx.math.Matrix4 view -> e
    com.badlogic.gdx.math.Matrix4 combined -> f
    void lookAt(float,float,float) -> a
    void normalizeUp() -> a
    com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3,float,float,float,float) -> a
    com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3,float,float,float,float) -> b
    void update() -> b
com.badlogic.gdx.graphics.Color -> a.a.a.s.b:
    com.badlogic.gdx.graphics.Color RED -> E
    com.badlogic.gdx.graphics.Color CORAL -> G
    com.badlogic.gdx.graphics.Color LIGHT_GRAY -> f
    com.badlogic.gdx.graphics.Color PINK -> I
    com.badlogic.gdx.graphics.Color DARK_GRAY -> h
    com.badlogic.gdx.graphics.Color PURPLE -> K
    float b -> c
    float r -> a
    com.badlogic.gdx.graphics.Color ORANGE -> A
    com.badlogic.gdx.graphics.Color TAN -> C
    com.badlogic.gdx.graphics.Color CHARTREUSE -> t
    com.badlogic.gdx.graphics.Color FOREST -> v
    com.badlogic.gdx.graphics.Color YELLOW -> x
    com.badlogic.gdx.graphics.Color GOLDENROD -> z
    com.badlogic.gdx.graphics.Color MAROON -> M
    com.badlogic.gdx.graphics.Color BLUE -> l
    com.badlogic.gdx.graphics.Color ROYAL -> n
    com.badlogic.gdx.graphics.Color SKY -> p
    com.badlogic.gdx.graphics.Color TEAL -> r
    com.badlogic.gdx.graphics.Color WHITE -> e
    com.badlogic.gdx.graphics.Color FIREBRICK -> D
    com.badlogic.gdx.graphics.Color GRAY -> g
    float WHITE_FLOAT_BITS -> j
    com.badlogic.gdx.graphics.Color SCARLET -> F
    com.badlogic.gdx.graphics.Color BLACK -> i
    com.badlogic.gdx.graphics.Color SALMON -> H
    com.badlogic.gdx.graphics.Color CLEAR -> k
    com.badlogic.gdx.graphics.Color MAGENTA -> J
    float a -> d
    float g -> b
    com.badlogic.gdx.graphics.Color BROWN -> B
    com.badlogic.gdx.graphics.Color LIME -> u
    com.badlogic.gdx.graphics.Color OLIVE -> w
    com.badlogic.gdx.graphics.Color GOLD -> y
    com.badlogic.gdx.graphics.Color NAVY -> m
    com.badlogic.gdx.graphics.Color VIOLET -> L
    com.badlogic.gdx.graphics.Color SLATE -> o
    com.badlogic.gdx.graphics.Color CYAN -> q
    com.badlogic.gdx.graphics.Color GREEN -> s
    void abgr8888ToColor(com.badlogic.gdx.graphics.Color,float) -> a
    com.badlogic.gdx.graphics.Color clamp() -> a
    com.badlogic.gdx.graphics.Color mul(com.badlogic.gdx.graphics.Color) -> a
    void rgba8888ToColor(com.badlogic.gdx.graphics.Color,int) -> a
    com.badlogic.gdx.graphics.Color set(float,float,float,float) -> a
    int rgba8888(float,float,float,float) -> b
    com.badlogic.gdx.graphics.Color set(com.badlogic.gdx.graphics.Color) -> b
    float toFloatBits() -> b
    float toFloatBits(float,float,float,float) -> c
    int toIntBits() -> c
com.badlogic.gdx.graphics.Colors -> a.a.a.s.c:
    com.badlogic.gdx.utils.ObjectMap map -> a
    com.badlogic.gdx.graphics.Color get(java.lang.String) -> a
    void reset() -> a
com.badlogic.gdx.graphics.Cubemap -> a.a.a.s.d:
    com.badlogic.gdx.graphics.CubemapData data -> i
    java.util.Map managedCubemaps -> k
    com.badlogic.gdx.assets.AssetManager assetManager -> j
    void clearAllCubemaps(com.badlogic.gdx.Application) -> a
    void load(com.badlogic.gdx.graphics.CubemapData) -> a
    void invalidateAllCubemaps(com.badlogic.gdx.Application) -> b
    boolean isManaged() -> u
    void reload() -> v
    java.lang.String getManagedStatus() -> w
com.badlogic.gdx.graphics.CubemapData -> a.a.a.s.e:
    void prepare() -> d
    boolean isManaged() -> e
    boolean isPrepared() -> f
    void consumeCubemapData() -> k
com.badlogic.gdx.graphics.GL20 -> a.a.a.s.f:
    void glBindFramebuffer(int,int) -> a
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> a
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glDepthMask(boolean) -> a
    void glDrawArrays(int,int,int) -> a
    void glEnable(int) -> a
    int glGenBuffer() -> a
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> a
    void glGetFloatv(int,java.nio.FloatBuffer) -> a
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> a
    void glShaderSource(int,java.lang.String) -> a
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glTexParameterf(int,int,float) -> a
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> a
    void glAttachShader(int,int) -> b
    int glCheckFramebufferStatus(int) -> b
    void glDrawElements(int,int,int,java.nio.Buffer) -> b
    void glFramebufferTexture2D(int,int,int,int,int) -> b
    int glGenRenderbuffer() -> b
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> b
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> b
    int glGetUniformLocation(int,java.lang.String) -> b
    void glTexParameteri(int,int,int) -> b
    void glViewport(int,int,int,int) -> b
    void glBindRenderbuffer(int,int) -> c
    void glBlendFuncSeparate(int,int,int,int) -> c
    int glGenTexture() -> c
    int glGetAttribLocation(int,java.lang.String) -> c
    void glGetIntegerv(int,java.nio.IntBuffer) -> c
    void glUseProgram(int) -> c
    int glCreateProgram() -> d
    void glDrawElements(int,int,int,int) -> d
    void glGenerateMipmap(int) -> d
    void glUniform1i(int,int) -> d
    void glBindBuffer(int,int) -> e
    void glFramebufferRenderbuffer(int,int,int,int) -> e
    int glGenFramebuffer() -> e
    void glLinkProgram(int) -> e
    void glDeleteRenderbuffer(int) -> f
    void glPixelStorei(int,int) -> f
    void glScissor(int,int,int,int) -> f
    void glBindTexture(int,int) -> g
    java.lang.String glGetShaderInfoLog(int) -> g
    void glRenderbufferStorage(int,int,int,int) -> g
    java.lang.String glGetProgramInfoLog(int) -> h
    void glEnableVertexAttribArray(int) -> i
    java.lang.String glGetString(int) -> j
    void glClear(int) -> k
    void glDeleteFramebuffer(int) -> l
    void glDisable(int) -> m
    void glDisableVertexAttribArray(int) -> n
    int glCreateShader(int) -> o
    void glDeleteTexture(int) -> q
    void glCompileShader(int) -> r
    void glDeleteBuffer(int) -> s
com.badlogic.gdx.graphics.GL30 -> a.a.a.s.g:
    void glDrawArraysInstanced(int,int,int,int) -> a
    void glDrawBuffers(int,java.nio.IntBuffer) -> a
    void glDrawElementsInstanced(int,int,int,int,int) -> a
    void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glGenVertexArrays(int,java.nio.IntBuffer) -> b
    void glBindVertexArray(int) -> p
com.badlogic.gdx.graphics.GLTexture -> a.a.a.s.h:
    float maxAnisotropicFilterLevel -> h
    float anisotropicFilterLevel -> g
    int glHandle -> b
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> f
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> d
    int glTarget -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> c
    void setFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter) -> a
    void setWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> a
    float unsafeSetAnisotropicFilter(float,boolean) -> a
    void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> a
    void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap,boolean) -> a
    void uploadImageData(int,com.badlogic.gdx.graphics.TextureData) -> a
    void uploadImageData(int,com.badlogic.gdx.graphics.TextureData,int) -> a
    void bind() -> k
    void delete() -> r
    int getTextureObjectHandle() -> s
    float getMaxAnisotropicFilterLevel() -> t
com.badlogic.gdx.graphics.Mesh -> a.a.a.s.i:
    com.badlogic.gdx.graphics.glutils.VertexData vertices -> a
    com.badlogic.gdx.graphics.glutils.IndexData indices -> b
    com.badlogic.gdx.graphics.glutils.InstanceData instances -> e
    boolean isInstanced -> f
    java.util.Map meshes -> g
    boolean autoBind -> c
    boolean isVertexArray -> d
    void addManagedMesh(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Mesh) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void clearAllMeshes(com.badlogic.gdx.Application) -> a
    com.badlogic.gdx.graphics.VertexAttribute getVertexAttribute(int) -> a
    com.badlogic.gdx.graphics.glutils.VertexData makeVertexBuffer(boolean,int,com.badlogic.gdx.graphics.VertexAttributes) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int,boolean) -> a
    com.badlogic.gdx.graphics.Mesh setIndices(short[]) -> a
    com.badlogic.gdx.graphics.Mesh setVertices(float[],int,int) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidateAllMeshes(com.badlogic.gdx.Application) -> b
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> b
    int getNumVertices() -> e
    int getNumIndices() -> l
    java.nio.ShortBuffer getIndicesBuffer() -> r
    com.badlogic.gdx.graphics.VertexAttributes getVertexAttributes() -> s
    java.lang.String getManagedStatus() -> t
com.badlogic.gdx.graphics.Mesh$1 -> a.a.a.s.i$a:
    int[] $SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType -> a
com.badlogic.gdx.graphics.Mesh$VertexDataType -> a.a.a.s.i$b:
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObject -> b
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectSubData -> c
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexArray -> a
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectWithVAO -> d
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] $VALUES -> e
com.badlogic.gdx.graphics.OrthographicCamera -> a.a.a.s.j:
    com.badlogic.gdx.math.Vector3 tmp -> o
    float zoom -> n
    void update(boolean) -> a
    void update() -> b
com.badlogic.gdx.graphics.Pixmap -> a.a.a.s.k:
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap pixmap -> a
    int color -> b
    boolean disposed -> c
    void dispose() -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int,int,int) -> a
    void setBlending(com.badlogic.gdx.graphics.Pixmap$Blending) -> a
    void setColor(float,float,float,float) -> a
    void fill() -> r
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> s
    int getGLFormat() -> t
    int getGLInternalFormat() -> u
    int getGLType() -> v
    int getHeight() -> w
    java.nio.ByteBuffer getPixels() -> x
    int getWidth() -> y
com.badlogic.gdx.graphics.Pixmap$Blending -> a.a.a.s.k$a:
    com.badlogic.gdx.graphics.Pixmap$Blending[] $VALUES -> c
    com.badlogic.gdx.graphics.Pixmap$Blending None -> a
    com.badlogic.gdx.graphics.Pixmap$Blending SourceOver -> b
com.badlogic.gdx.graphics.Pixmap$Filter -> a.a.a.s.k$b:
    com.badlogic.gdx.graphics.Pixmap$Filter[] $VALUES -> c
    com.badlogic.gdx.graphics.Pixmap$Filter NearestNeighbour -> a
    com.badlogic.gdx.graphics.Pixmap$Filter BiLinear -> b
com.badlogic.gdx.graphics.Pixmap$Format -> a.a.a.s.k$c:
    com.badlogic.gdx.graphics.Pixmap$Format Alpha -> a
    com.badlogic.gdx.graphics.Pixmap$Format Intensity -> b
    com.badlogic.gdx.graphics.Pixmap$Format LuminanceAlpha -> c
    com.badlogic.gdx.graphics.Pixmap$Format RGB565 -> d
    com.badlogic.gdx.graphics.Pixmap$Format RGBA4444 -> e
    com.badlogic.gdx.graphics.Pixmap$Format RGB888 -> f
    com.badlogic.gdx.graphics.Pixmap$Format RGBA8888 -> g
    com.badlogic.gdx.graphics.Pixmap$Format[] $VALUES -> h
    com.badlogic.gdx.graphics.Pixmap$Format fromGdx2DPixmapFormat(int) -> a
    int toGdx2DPixmapFormat(com.badlogic.gdx.graphics.Pixmap$Format) -> a
com.badlogic.gdx.graphics.PixmapIO -> a.a.a.s.l:
    com.badlogic.gdx.graphics.Pixmap readCIM(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.PixmapIO$CIM -> a.a.a.s.l$a:
    byte[] readBuffer -> a
    com.badlogic.gdx.graphics.Pixmap read(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.Texture -> a.a.a.s.m:
    java.util.Map managedTextures -> k
    com.badlogic.gdx.assets.AssetManager assetManager -> j
    com.badlogic.gdx.graphics.TextureData data -> i
    void addManagedTexture(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Texture) -> a
    void clearAllTextures(com.badlogic.gdx.Application) -> a
    void dispose() -> a
    void load(com.badlogic.gdx.graphics.TextureData) -> a
    void invalidateAllTextures(com.badlogic.gdx.Application) -> b
    int getHeight() -> u
    int getWidth() -> v
    boolean isManaged() -> w
    void reload() -> x
    java.lang.String getManagedStatus() -> y
com.badlogic.gdx.graphics.Texture$TextureFilter -> a.a.a.s.m$a:
    com.badlogic.gdx.graphics.Texture$TextureFilter Nearest -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearLinear -> h
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestLinear -> g
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearNearest -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestNearest -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMap -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter[] $VALUES -> i
    com.badlogic.gdx.graphics.Texture$TextureFilter Linear -> c
    int glEnum -> a
    int getGLEnum() -> a
com.badlogic.gdx.graphics.Texture$TextureWrap -> a.a.a.s.m$b:
    com.badlogic.gdx.graphics.Texture$TextureWrap MirroredRepeat -> b
    com.badlogic.gdx.graphics.Texture$TextureWrap Repeat -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap ClampToEdge -> c
    com.badlogic.gdx.graphics.Texture$TextureWrap[] $VALUES -> e
    int glEnum -> a
    int getGLEnum() -> a
com.badlogic.gdx.graphics.TextureArray -> a.a.a.s.n:
    com.badlogic.gdx.graphics.TextureArrayData data -> i
    java.util.Map managedTextureArrays -> j
    void clearAllTextureArrays(com.badlogic.gdx.Application) -> a
    void load(com.badlogic.gdx.graphics.TextureArrayData) -> a
    void invalidateAllTextureArrays(com.badlogic.gdx.Application) -> b
    boolean isManaged() -> u
    void reload() -> v
com.badlogic.gdx.graphics.TextureArrayData -> a.a.a.s.o:
    int getDepth() -> a
    int getWidth() -> b
    int getHeight() -> c
    void prepare() -> d
    boolean isManaged() -> e
    boolean isPrepared() -> f
    int getInternalFormat() -> g
    void consumeTextureArrayData() -> h
    int getGLType() -> i
com.badlogic.gdx.graphics.TextureData -> a.a.a.s.p:
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    int getWidth() -> b
    int getHeight() -> c
    void prepare() -> d
    boolean isManaged() -> e
    boolean isPrepared() -> f
    boolean disposePixmap() -> g
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
com.badlogic.gdx.graphics.TextureData$Factory -> a.a.a.s.p$a:
    com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean) -> a
com.badlogic.gdx.graphics.TextureData$TextureDataType -> a.a.a.s.p$b:
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] $VALUES -> c
    com.badlogic.gdx.graphics.TextureData$TextureDataType Pixmap -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType Custom -> b
com.badlogic.gdx.graphics.VertexAttribute -> a.a.a.s.q:
    java.lang.String alias -> f
    int usageIndex -> h
    int unit -> g
    int type -> d
    int offset -> e
    int numComponents -> b
    boolean normalized -> c
    int usage -> a
    boolean equals(com.badlogic.gdx.graphics.VertexAttribute) -> a
    int getKey() -> a
    int getSizeInBytes() -> b
com.badlogic.gdx.graphics.VertexAttributes -> a.a.a.s.r:
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable iterable -> d
    long mask -> c
    int vertexSize -> b
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> a
    int compareTo(com.badlogic.gdx.graphics.VertexAttributes) -> a
    com.badlogic.gdx.graphics.VertexAttribute get(int) -> a
    long getMask() -> a
    int size() -> b
    int calculateOffsets() -> c
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable -> a.a.a.s.r$a:
    java.lang.Object[] array -> a
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator2 -> c
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator1 -> b
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator -> a.a.a.s.r$b:
    java.lang.Object[] array -> a
    int index -> b
    boolean valid -> c
com.badlogic.gdx.graphics.g2d.Batch -> com.badlogic.gdx.graphics.g2d.a:
    void draw(com.badlogic.gdx.graphics.Texture,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> a
    void setColor(float,float,float,float) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setPackedColor(float) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> b
    void end() -> g
    float getPackedColor() -> m
    com.badlogic.gdx.graphics.Color getColor() -> n
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> o
    void begin() -> p
com.badlogic.gdx.graphics.g2d.BitmapFont -> com.badlogic.gdx.graphics.g2d.b:
    com.badlogic.gdx.graphics.g2d.BitmapFontCache cache -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> a
    com.badlogic.gdx.utils.Array regions -> b
    boolean integer -> d
    com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float) -> a
    void load(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData getData() -> r
    com.badlogic.gdx.utils.Array getRegions() -> s
    com.badlogic.gdx.graphics.g2d.BitmapFontCache newFontCache() -> t
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData -> com.badlogic.gdx.graphics.g2d.b$a:
    float descent -> l
    float ascent -> k
    float capHeight -> j
    float lineHeight -> i
    com.badlogic.gdx.files.FileHandle fontFile -> c
    float padLeft -> h
    float padBottom -> g
    float padRight -> f
    float padTop -> e
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph[][] glyphs -> r
    boolean markupEnabled -> q
    java.lang.String[] imagePaths -> b
    char[] breakChars -> v
    char[] xChars -> w
    float xHeight -> u
    char[] capChars -> x
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph missingGlyph -> s
    float spaceXadvance -> t
    java.lang.String name -> a
    float scaleY -> p
    float scaleX -> o
    float blankLineScale -> n
    boolean flipped -> d
    float down -> m
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getFirstGlyph() -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char) -> a
    void getGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph) -> a
    int getWrapIndex(com.badlogic.gdx.utils.Array,int) -> a
    void load(com.badlogic.gdx.files.FileHandle,boolean) -> a
    void setGlyph(int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph) -> a
    void setGlyphRegion(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    void setScale(float,float) -> a
    boolean isBreakChar(char) -> b
    boolean isWhitespace(char) -> c
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph -> com.badlogic.gdx.graphics.g2d.b$b:
    boolean fixedWidth -> n
    int page -> o
    int xadvance -> l
    float v2 -> i
    float u2 -> h
    int xoffset -> j
    float v -> g
    int yoffset -> k
    float u -> f
    int width -> d
    int height -> e
    int srcX -> b
    int srcY -> c
    byte[][] kerning -> m
    int id -> a
    int getKerning(char) -> a
    void setKerning(int,int) -> a
com.badlogic.gdx.graphics.g2d.BitmapFontCache -> com.badlogic.gdx.graphics.g2d.c:
    int[] idx -> h
    com.badlogic.gdx.graphics.Color color -> f
    float[][] pageVertices -> g
    com.badlogic.gdx.utils.IntArray[] pageGlyphIndices -> i
    com.badlogic.gdx.utils.Array pooledLayouts -> d
    com.badlogic.gdx.utils.Array layouts -> c
    int glyphCount -> e
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> a
    int[] tempGlyphCount -> j
    boolean integer -> b
    void addGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,float,float,float) -> a
    com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float) -> a
    com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float,int,int,float,int,boolean,java.lang.String) -> a
    void addText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> a
    void clear() -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch) -> a
    void requireGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout) -> a
    void requirePageGlyphs(int,int) -> a
    void addToCache(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> b
    com.badlogic.gdx.graphics.Color getColor() -> b
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap -> com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    long[] nativeData -> f
    long basePtr -> a
    java.nio.ByteBuffer pixelPtr -> e
    int format -> d
    int width -> b
    int height -> c
    void clear(int) -> a
    void dispose() -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int,int,int) -> a
    void setBlend(int) -> b
    void convert(int) -> c
    java.lang.String getFormatString(int) -> d
    int toGlFormat(int) -> e
    int toGlType(int) -> f
    int getFormat() -> r
    int getGLFormat() -> s
    int getGLInternalFormat() -> t
    int getGLType() -> u
    int getHeight() -> v
    java.nio.ByteBuffer getPixels() -> w
    int getWidth() -> x
com.badlogic.gdx.graphics.g2d.GlyphLayout -> com.badlogic.gdx.graphics.g2d.d:
    com.badlogic.gdx.utils.Pool glyphRunPool -> d
    com.badlogic.gdx.utils.Array runs -> a
    float height -> c
    float width -> b
    com.badlogic.gdx.utils.Pool colorPool -> e
    com.badlogic.gdx.utils.Array colorStack -> f
    void adjustLastGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun) -> a
    int parseColorMarkup(java.lang.CharSequence,int,int,com.badlogic.gdx.utils.Pool) -> a
    void reset() -> a
    void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.Color,float,int,boolean,java.lang.String) -> a
    void truncate(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,float,java.lang.String,int,com.badlogic.gdx.utils.Pool) -> a
    com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun wrap(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,int,int) -> a
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun -> com.badlogic.gdx.graphics.g2d.d$a:
    com.badlogic.gdx.graphics.Color color -> f
    com.badlogic.gdx.utils.Array glyphs -> a
    float width -> e
    float y -> d
    float x -> c
    com.badlogic.gdx.utils.FloatArray xAdvances -> b
    void reset() -> a
com.badlogic.gdx.graphics.g2d.NinePatch -> com.badlogic.gdx.graphics.g2d.e:
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
com.badlogic.gdx.graphics.g2d.Sprite -> com.badlogic.gdx.graphics.g2d.f:
    com.badlogic.gdx.graphics.Color getColor() -> h
com.badlogic.gdx.graphics.g2d.SpriteBatch -> com.badlogic.gdx.graphics.g2d.g:
    int blendSrcFuncAlpha -> l
    int blendDstFuncAlpha -> m
    boolean blendingDisabled -> i
    int blendSrcFunc -> j
    int blendDstFunc -> k
    com.badlogic.gdx.graphics.Mesh$VertexDataType defaultVertexDataType -> u
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> n
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> o
    float[] vertices -> b
    int idx -> c
    com.badlogic.gdx.graphics.Mesh mesh -> a
    com.badlogic.gdx.graphics.Texture lastTexture -> d
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> g
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> h
    com.badlogic.gdx.math.Matrix4 transformMatrix -> f
    boolean drawing -> e
    int maxSpritesInBatch -> t
    float colorPacked -> q
    int renderCalls -> r
    com.badlogic.gdx.graphics.Color color -> p
    int totalRenderCalls -> s
    void draw(com.badlogic.gdx.graphics.Texture,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> a
    void setColor(float,float,float,float) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setPackedColor(float) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void switchTexture(com.badlogic.gdx.graphics.Texture) -> a
    boolean isBlendingEnabled() -> b
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> b
    void setupMatrices() -> c
    com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader() -> d
    void end() -> g
    float getPackedColor() -> m
    com.badlogic.gdx.graphics.Color getColor() -> n
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> o
    void begin() -> p
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion -> com.badlogic.gdx.graphics.g2d.h:
    float offsetY -> j
    int originalHeight -> l
    java.lang.String name -> h
    float offsetX -> i
    int packedHeight -> k
com.badlogic.gdx.graphics.g2d.TextureRegion -> com.badlogic.gdx.graphics.g2d.i:
    float v2 -> e
    float u2 -> d
    int regionWidth -> f
    float v -> c
    int regionHeight -> g
    float u -> b
    com.badlogic.gdx.graphics.Texture texture -> a
    int getRegionHeight() -> a
    void setRegion(float,float,float,float) -> a
    void setRegion(int,int,int,int) -> a
    int getRegionWidth() -> b
    com.badlogic.gdx.graphics.Texture getTexture() -> c
    float getU() -> d
    float getU2() -> e
    float getV() -> f
    float getV2() -> g
com.badlogic.gdx.graphics.glutils.ETC1 -> com.badlogic.gdx.graphics.glutils.ETC1:
    int ETC1_RGB8_OES -> b
    int PKM_HEADER_SIZE -> a
    com.badlogic.gdx.graphics.Pixmap decodeImage(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,com.badlogic.gdx.graphics.Pixmap$Format) -> a
    int getPixelSize(com.badlogic.gdx.graphics.Pixmap$Format) -> a
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data -> com.badlogic.gdx.graphics.glutils.ETC1$a:
    int dataOffset -> d
    java.nio.ByteBuffer compressedData -> c
    int height -> b
    int width -> a
    void dispose() -> a
    boolean hasPKMHeader() -> r
    void checkNPOT() -> s
com.badlogic.gdx.graphics.glutils.ETC1TextureData -> com.badlogic.gdx.graphics.glutils.a:
    com.badlogic.gdx.files.FileHandle file -> a
    boolean isPrepared -> f
    int width -> d
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data data -> b
    int height -> e
    boolean useMipMaps -> c
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    int getWidth() -> b
    int getHeight() -> c
    void prepare() -> d
    boolean isManaged() -> e
    boolean isPrepared() -> f
    boolean disposePixmap() -> g
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
com.badlogic.gdx.graphics.glutils.FileTextureData -> com.badlogic.gdx.graphics.glutils.b:
    com.badlogic.gdx.graphics.Pixmap pixmap -> e
    com.badlogic.gdx.files.FileHandle file -> a
    com.badlogic.gdx.graphics.Pixmap$Format format -> d
    boolean useMipMaps -> f
    boolean isPrepared -> g
    int width -> b
    int height -> c
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    int getWidth() -> b
    int getHeight() -> c
    void prepare() -> d
    boolean isManaged() -> e
    boolean isPrepared() -> f
    boolean disposePixmap() -> g
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
com.badlogic.gdx.graphics.glutils.GLFrameBuffer -> com.badlogic.gdx.graphics.glutils.c:
    int defaultFramebufferHandle -> j
    com.badlogic.gdx.utils.Array textureAttachments -> a
    boolean defaultFramebufferHandleInitialized -> k
    java.util.Map buffers -> i
    boolean hasDepthStencilPackedBuffer -> f
    int stencilbufferHandle -> d
    boolean isMRT -> g
    int depthStencilPackedBufferHandle -> e
    int framebufferHandle -> b
    int depthbufferHandle -> c
    com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder bufferBuilder -> h
    void addManagedFrameBuffer(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.GLFrameBuffer) -> a
    void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.GLTexture) -> a
    void clearAllFrameBuffers(com.badlogic.gdx.Application) -> a
    com.badlogic.gdx.graphics.GLTexture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec) -> a
    java.lang.StringBuilder getManagedStatus(java.lang.StringBuilder) -> a
    void disposeColorTexture(com.badlogic.gdx.graphics.GLTexture) -> b
    void invalidateAllFrameBuffers(com.badlogic.gdx.Application) -> b
    void build() -> r
    void checkValidBuilder() -> s
    java.lang.String getManagedStatus() -> t
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec -> com.badlogic.gdx.graphics.glutils.c$a:
    int internalFormat -> a
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec -> com.badlogic.gdx.graphics.glutils.c$b:
    boolean isFloat -> a
    boolean isDepth -> b
    boolean isStencil -> c
    boolean isColorTexture() -> a
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder -> com.badlogic.gdx.graphics.glutils.c$c:
    com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec packedStencilDepthRenderBufferSpec -> f
    com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec depthRenderBufferSpec -> e
    com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec stencilRenderBufferSpec -> d
    boolean hasPackedStencilDepthRenderBuffer -> i
    com.badlogic.gdx.utils.Array textureAttachmentSpecs -> c
    boolean hasStencilRenderBuffer -> g
    boolean hasDepthRenderBuffer -> h
    int height -> b
    int width -> a
com.badlogic.gdx.graphics.glutils.GLVersion -> com.badlogic.gdx.graphics.glutils.d:
    com.badlogic.gdx.graphics.glutils.GLVersion$Type type -> b
    int majorVersion -> a
    void extractVersion(java.lang.String,java.lang.String) -> a
    int getMajorVersion() -> a
    int parseInt(java.lang.String,int) -> a
com.badlogic.gdx.graphics.glutils.GLVersion$Type -> com.badlogic.gdx.graphics.glutils.d$a:
    com.badlogic.gdx.graphics.glutils.GLVersion$Type WebGL -> c
    com.badlogic.gdx.graphics.glutils.GLVersion$Type GLES -> b
    com.badlogic.gdx.graphics.glutils.GLVersion$Type NONE -> d
    com.badlogic.gdx.graphics.glutils.GLVersion$Type OpenGL -> a
    com.badlogic.gdx.graphics.glutils.GLVersion$Type[] $VALUES -> e
com.badlogic.gdx.graphics.glutils.HdpiMode -> com.badlogic.gdx.graphics.glutils.e:
    com.badlogic.gdx.graphics.glutils.HdpiMode Pixels -> b
    com.badlogic.gdx.graphics.glutils.HdpiMode Logical -> a
    com.badlogic.gdx.graphics.glutils.HdpiMode[] $VALUES -> c
com.badlogic.gdx.graphics.glutils.HdpiUtils -> com.badlogic.gdx.graphics.glutils.f:
    com.badlogic.gdx.graphics.glutils.HdpiMode mode -> a
    void glScissor(int,int,int,int) -> a
    int toBackBufferX(int) -> a
    void glViewport(int,int,int,int) -> b
    int toBackBufferY(int) -> b
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer -> com.badlogic.gdx.graphics.glutils.h:
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float) -> a
    void color(float,float,float,float) -> a
    void vertex(float,float,float) -> a
    int getNumVertices() -> e
    int getMaxVertices() -> f
    void end() -> g
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20 -> com.badlogic.gdx.graphics.glutils.g:
    java.lang.String[] shaderUniformNames -> l
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> f
    float[] vertices -> k
    com.badlogic.gdx.graphics.Mesh mesh -> e
    int vertexSize -> h
    int colorOffset -> i
    int numTexCoords -> g
    int numVertices -> d
    com.badlogic.gdx.math.Matrix4 projModelView -> j
    int vertexIdx -> b
    int maxVertices -> c
    int primitiveType -> a
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    com.badlogic.gdx.graphics.VertexAttribute[] buildVertexAttributes(boolean,boolean,int) -> a
    void color(float) -> a
    void color(float,float,float,float) -> a
    void flush() -> a
    void vertex(float,float,float) -> a
    com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader(boolean,boolean,int) -> b
    java.lang.String createFragmentShader(boolean,boolean,int) -> c
    java.lang.String createVertexShader(boolean,boolean,int) -> d
    int getNumVertices() -> e
    int getMaxVertices() -> f
    void end() -> g
com.badlogic.gdx.graphics.glutils.IndexArray -> com.badlogic.gdx.graphics.glutils.i:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    boolean empty -> c
    void setIndices(short[],int,int) -> a
    void invalidate() -> d
    java.nio.ShortBuffer getBuffer() -> h
    void unbind() -> i
    int getNumMaxIndices() -> j
    void bind() -> k
    int getNumIndices() -> l
com.badlogic.gdx.graphics.glutils.IndexBufferObject -> com.badlogic.gdx.graphics.glutils.j:
    boolean isBound -> e
    int usage -> f
    java.nio.ShortBuffer buffer -> a
    boolean empty -> g
    java.nio.ByteBuffer byteBuffer -> b
    int bufferHandle -> c
    boolean isDirty -> d
    void setIndices(short[],int,int) -> a
    void invalidate() -> d
    java.nio.ShortBuffer getBuffer() -> h
    void unbind() -> i
    int getNumMaxIndices() -> j
    void bind() -> k
    int getNumIndices() -> l
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.k:
    boolean isBound -> e
    int usage -> f
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    int bufferHandle -> c
    boolean isDirty -> d
    void setIndices(short[],int,int) -> a
    int createBufferObject() -> b
    void invalidate() -> d
    java.nio.ShortBuffer getBuffer() -> h
    void unbind() -> i
    int getNumMaxIndices() -> j
    void bind() -> k
    int getNumIndices() -> l
com.badlogic.gdx.graphics.glutils.IndexData -> com.badlogic.gdx.graphics.glutils.l:
    void setIndices(short[],int,int) -> a
    void invalidate() -> d
    java.nio.ShortBuffer getBuffer() -> h
    void unbind() -> i
    int getNumMaxIndices() -> j
    void bind() -> k
    int getNumIndices() -> l
com.badlogic.gdx.graphics.glutils.InstanceData -> com.badlogic.gdx.graphics.glutils.m:
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    int getNumInstances() -> q
com.badlogic.gdx.graphics.glutils.KTXTextureData -> com.badlogic.gdx.graphics.glutils.n:
    boolean useMipMaps -> m
    com.badlogic.gdx.files.FileHandle file -> a
    java.nio.ByteBuffer compressedData -> l
    int numberOfMipmapLevels -> j
    int imagePos -> k
    int numberOfArrayElements -> h
    int numberOfFaces -> i
    int pixelHeight -> f
    int pixelDepth -> g
    int glInternalFormat -> d
    int pixelWidth -> e
    int glType -> b
    int glFormat -> c
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    int getWidth() -> b
    int getHeight() -> c
    void prepare() -> d
    boolean isManaged() -> e
    boolean isPrepared() -> f
    boolean disposePixmap() -> g
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    void consumeCubemapData() -> k
    void disposePreparedData() -> l
com.badlogic.gdx.graphics.glutils.MipMapGenerator -> com.badlogic.gdx.graphics.glutils.o:
    boolean useHWMipMap -> a
    void generateMipMap(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> a
    void generateMipMapGLES20(int,com.badlogic.gdx.graphics.Pixmap) -> a
    void generateMipMapCPU(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> b
    void generateMipMapDesktop(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> c
com.badlogic.gdx.graphics.glutils.PixmapTextureData -> com.badlogic.gdx.graphics.glutils.p:
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    com.badlogic.gdx.graphics.Pixmap pixmap -> a
    boolean managed -> e
    boolean useMipMaps -> c
    boolean disposePixmap -> d
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    int getWidth() -> b
    int getHeight() -> c
    void prepare() -> d
    boolean isManaged() -> e
    boolean isPrepared() -> f
    boolean disposePixmap() -> g
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
com.badlogic.gdx.graphics.glutils.ShaderProgram -> com.badlogic.gdx.graphics.glutils.q:
    com.badlogic.gdx.utils.ObjectIntMap attributeSizes -> i
    int vertexShaderHandle -> l
    int fragmentShaderHandle -> m
    boolean invalidated -> p
    com.badlogic.gdx.utils.ObjectIntMap attributes -> g
    java.nio.IntBuffer params -> q
    com.badlogic.gdx.utils.ObjectIntMap attributeTypes -> h
    int program -> k
    com.badlogic.gdx.utils.ObjectIntMap uniformSizes -> e
    java.lang.String fragmentShaderSource -> o
    java.lang.String vertexShaderSource -> n
    java.lang.String[] uniformNames -> f
    java.nio.IntBuffer type -> r
    boolean pedantic -> s
    java.lang.String prependFragmentCode -> u
    java.lang.String prependVertexCode -> t
    com.badlogic.gdx.utils.ObjectMap shaders -> v
    java.lang.String[] attributeNames -> j
    com.badlogic.gdx.utils.ObjectIntMap uniforms -> c
    com.badlogic.gdx.utils.ObjectIntMap uniformTypes -> d
    java.lang.String log -> a
    boolean isCompiled -> b
    void addManagedShader(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void clearAllShaderPrograms(com.badlogic.gdx.Application) -> a
    void compileShaders(java.lang.String,java.lang.String) -> a
    void disableVertexAttribute(int) -> a
    void disableVertexAttribute(java.lang.String) -> a
    int fetchUniformLocation(java.lang.String,boolean) -> a
    int loadShader(int,java.lang.String) -> a
    void setUniformMatrix(int,com.badlogic.gdx.math.Matrix4,boolean) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4,boolean) -> a
    void setUniformi(java.lang.String,int) -> a
    void setVertexAttribute(int,int,int,boolean,int,int) -> a
    void setVertexAttribute(int,int,int,boolean,int,java.nio.Buffer) -> a
    void enableVertexAttribute(int) -> b
    int getAttributeLocation(java.lang.String) -> b
    void invalidateAllShaderPrograms(com.badlogic.gdx.Application) -> b
    int fetchAttributeLocation(java.lang.String) -> c
    int linkProgram(int) -> c
    int fetchUniformLocation(java.lang.String) -> d
    void bind() -> k
    int createProgram() -> r
    java.lang.String getLog() -> s
    boolean isCompiled() -> t
    void checkManaged() -> u
    void fetchAttributes() -> v
    void fetchUniforms() -> w
    java.lang.String getManagedStatus() -> x
com.badlogic.gdx.graphics.glutils.ShapeRenderer -> com.badlogic.gdx.graphics.glutils.r:
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> c
    com.badlogic.gdx.math.Matrix4 transformMatrix -> d
    com.badlogic.gdx.graphics.Color color -> f
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> e
    com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer renderer -> a
    boolean autoShapeType -> h
    boolean matrixDirty -> b
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType shapeType -> g
    void begin(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType) -> a
    void check(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,int) -> a
    void rect(float,float,float,float,float,float,float,float,float) -> a
    void rect(float,float,float,float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color) -> a
    void setAutoShapeType(boolean) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void rect(float,float,float,float) -> b
    void set(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType) -> b
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> b
    void end() -> g
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> o
    void begin() -> p
    boolean isDrawing() -> r
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType -> com.badlogic.gdx.graphics.glutils.r$a:
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] $VALUES -> e
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Filled -> d
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Line -> c
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Point -> b
    int glType -> a
    int getGlType() -> a
com.badlogic.gdx.graphics.glutils.VertexArray -> com.badlogic.gdx.graphics.glutils.s:
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    void setVertices(float[],int,int) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> d
    int getNumVertices() -> e
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
com.badlogic.gdx.graphics.glutils.VertexBufferObject -> com.badlogic.gdx.graphics.glutils.t:
    java.nio.FloatBuffer buffer -> b
    int usage -> f
    boolean isDirty -> g
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> e
    boolean isBound -> h
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    boolean ownsBuffer -> d
    void setBuffer(java.nio.Buffer,boolean,com.badlogic.gdx.graphics.VertexAttributes) -> a
    void setUsage(int) -> a
    void setVertices(float[],int,int) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void bufferChanged() -> b
    void invalidate() -> d
    int getNumVertices() -> e
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.u:
    java.nio.FloatBuffer buffer -> b
    boolean isDirect -> e
    int usage -> f
    int bufferHandle -> d
    boolean isDirty -> g
    java.nio.ByteBuffer byteBuffer -> c
    boolean isBound -> h
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    void setVertices(float[],int,int) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void bufferChanged() -> b
    int createBufferObject() -> c
    void invalidate() -> d
    int getNumVertices() -> e
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO -> com.badlogic.gdx.graphics.glutils.v:
    java.nio.FloatBuffer buffer -> b
    java.nio.IntBuffer tmpHandle -> j
    int vaoHandle -> h
    boolean isDirty -> f
    int bufferHandle -> d
    boolean isBound -> g
    java.nio.ByteBuffer byteBuffer -> c
    int usage -> e
    com.badlogic.gdx.utils.IntArray cachedLocations -> i
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    void bindData(com.badlogic.gdx.graphics.GL20) -> a
    void setVertices(float[],int,int) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void bufferChanged() -> b
    void bindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> c
    void createVAO() -> c
    void invalidate() -> d
    int getNumVertices() -> e
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
com.badlogic.gdx.graphics.glutils.VertexData -> com.badlogic.gdx.graphics.glutils.w:
    void setVertices(float[],int,int) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> d
    int getNumVertices() -> e
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
com.badlogic.gdx.input.GestureDetector -> a.a.a.t.a:
    long lastTapTime -> i
    float lastTapY -> k
    int lastTapButton -> l
    boolean pinching -> o
    int tapCount -> h
    float longPressSeconds -> e
    float tapRectangleHeight -> c
    com.badlogic.gdx.utils.Timer$Task longPressTask -> y
    float tapRectangleCenterY -> s
    com.badlogic.gdx.math.Vector2 initialPointer2 -> x
    com.badlogic.gdx.math.Vector2 pointer2 -> v
    boolean longPressFired -> n
    float lastTapX -> j
    int lastTapPointer -> m
    boolean panning -> p
    long maxFlingDelay -> f
    float tapRectangleWidth -> b
    long tapCountInterval -> d
    boolean inTapRectangle -> g
    float tapRectangleCenterX -> r
    long touchDownTime -> t
    com.badlogic.gdx.input.GestureDetector$GestureListener listener -> a
    com.badlogic.gdx.input.GestureDetector$VelocityTracker tracker -> q
    com.badlogic.gdx.math.Vector2 initialPointer1 -> w
    com.badlogic.gdx.math.Vector2 pointer1 -> u
    boolean touchDown(float,float,int,int) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchDragged(float,float,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean isWithinTapRectangle(float,float,float,float) -> b
    boolean touchUp(float,float,int,int) -> b
    boolean touchUp(int,int,int,int) -> b
com.badlogic.gdx.input.GestureDetector$1 -> a.a.a.t.a$a:
    com.badlogic.gdx.input.GestureDetector this$0 -> f
com.badlogic.gdx.input.GestureDetector$GestureListener -> a.a.a.t.a$b:
    boolean fling(float,float,int) -> a
    boolean pan(float,float,float,float) -> a
    boolean panStop(float,float,int,int) -> a
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
    void pinchStop() -> a
    boolean zoom(float,float) -> a
    boolean longPress(float,float) -> b
    boolean touchDown(float,float,int,int) -> b
    boolean tap(float,float,int,int) -> c
com.badlogic.gdx.input.GestureDetector$VelocityTracker -> a.a.a.t.a$c:
    long lastTime -> f
    float[] meanY -> i
    float deltaY -> e
    float[] meanX -> h
    float deltaX -> d
    float lastY -> c
    int numSamples -> g
    float lastX -> b
    int sampleSize -> a
    long[] meanTime -> j
    float getAverage(float[],int) -> a
    long getAverage(long[],int) -> a
    float getVelocityX() -> a
    void start(float,float,long) -> a
    float getVelocityY() -> b
    void update(float,float,long) -> b
com.badlogic.gdx.math.Affine2 -> com.badlogic.gdx.math.a:
    float m12 -> f
    float m11 -> e
    float m10 -> d
    float m02 -> c
    float m01 -> b
    float m00 -> a
    com.badlogic.gdx.math.Affine2 preMul(com.badlogic.gdx.math.Affine2) -> a
    com.badlogic.gdx.math.Affine2 setToTrnRotScl(float,float,float,float,float) -> a
    com.badlogic.gdx.math.Affine2 translate(float,float) -> a
com.badlogic.gdx.math.Frustum -> com.badlogic.gdx.math.b:
    com.badlogic.gdx.math.Vector3[] planePoints -> b
    com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints -> d
    float[] clipSpacePlanePointsArray -> e
    float[] planePointsArray -> c
    com.badlogic.gdx.math.Plane[] planes -> a
    void update(com.badlogic.gdx.math.Matrix4) -> a
com.badlogic.gdx.math.MathUtils -> com.badlogic.gdx.math.c:
    java.util.Random random -> a
    float cosDeg(float) -> a
    boolean isEqual(float,float,float) -> a
    boolean isPowerOfTwo(int) -> a
    float random(float,float) -> a
    int random(int,int) -> a
    int nextPowerOfTwo(int) -> b
    float sinDeg(float) -> b
    int random(int) -> c
com.badlogic.gdx.math.MathUtils$Sin -> com.badlogic.gdx.math.c$a:
    float[] table -> a
com.badlogic.gdx.math.Matrix4 -> com.badlogic.gdx.math.Matrix4:
    com.badlogic.gdx.math.Vector3 l_vey -> d
    com.badlogic.gdx.math.Vector3 tmpVec -> e
    com.badlogic.gdx.math.Vector3 l_vez -> b
    com.badlogic.gdx.math.Vector3 l_vex -> c
    com.badlogic.gdx.math.Matrix4 tmpMat -> f
    float[] val -> a
    com.badlogic.gdx.math.Matrix4 idt() -> a
    com.badlogic.gdx.math.Matrix4 mul(com.badlogic.gdx.math.Matrix4) -> a
    void mul(float[],float[]) -> a
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Affine2) -> a
    com.badlogic.gdx.math.Matrix4 set(float[]) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho(float,float,float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToTranslation(float,float,float) -> a
    float det(float[]) -> b
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix4) -> b
    boolean inv(float[]) -> c
com.badlogic.gdx.math.Plane -> com.badlogic.gdx.math.d:
    com.badlogic.gdx.math.Vector3 normal -> a
    float d -> b
    void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
com.badlogic.gdx.math.Quaternion -> com.badlogic.gdx.math.e:
    float w -> d
    float z -> c
    float y -> b
    float x -> a
    com.badlogic.gdx.math.Quaternion idt() -> a
    com.badlogic.gdx.math.Quaternion set(float,float,float,float) -> a
com.badlogic.gdx.math.RandomXS128 -> com.badlogic.gdx.math.f:
    long seed1 -> b
    long seed0 -> a
    long nextLong(long) -> a
    void setState(long,long) -> a
    long murmurHash3(long) -> b
com.badlogic.gdx.math.Rectangle -> com.badlogic.gdx.math.g:
    com.badlogic.gdx.math.Rectangle tmp -> e
    float height -> d
    float width -> c
    float y -> b
    float x -> a
    com.badlogic.gdx.math.Rectangle set(float,float,float,float) -> a
com.badlogic.gdx.math.Shape2D -> com.badlogic.gdx.math.h:
com.badlogic.gdx.math.Vector -> com.badlogic.gdx.math.k:
com.badlogic.gdx.math.Vector2 -> com.badlogic.gdx.math.i:
    float y -> b
    float x -> a
    float dst(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 set(float,float) -> a
    com.badlogic.gdx.math.Vector2 set(com.badlogic.gdx.math.Vector2) -> b
com.badlogic.gdx.math.Vector3 -> com.badlogic.gdx.math.j:
    float z -> c
    float y -> b
    float x -> a
    com.badlogic.gdx.math.Vector3 add(float,float,float) -> a
    com.badlogic.gdx.math.Vector3 add(com.badlogic.gdx.math.Vector3) -> a
    boolean isZero() -> a
    com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Vector3 scl(float) -> a
    com.badlogic.gdx.math.Vector3 crs(float,float,float) -> b
    com.badlogic.gdx.math.Vector3 crs(com.badlogic.gdx.math.Vector3) -> b
    float len2() -> b
    com.badlogic.gdx.math.Vector3 prj(com.badlogic.gdx.math.Matrix4) -> b
    float dot(com.badlogic.gdx.math.Vector3) -> c
    com.badlogic.gdx.math.Vector3 nor() -> c
    com.badlogic.gdx.math.Vector3 set(float,float,float) -> c
    com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector3) -> d
    com.badlogic.gdx.math.Vector3 sub(float,float,float) -> d
    com.badlogic.gdx.math.Vector3 sub(com.badlogic.gdx.math.Vector3) -> e
com.badlogic.gdx.math.collision.Ray -> com.badlogic.gdx.math.l.a:
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 origin -> a
com.badlogic.gdx.net.NetJavaImpl -> a.a.a.u.a:
com.badlogic.gdx.net.NetJavaImpl$1 -> a.a.a.u.a$a:
    java.util.concurrent.atomic.AtomicInteger threadID -> a
com.badlogic.gdx.physics.box2d.Body -> com.badlogic.gdx.physics.box2d.Body:
    com.badlogic.gdx.utils.Array joints -> e
    long addr -> a
    com.badlogic.gdx.utils.Array fixtures -> d
    com.badlogic.gdx.physics.box2d.World world -> c
    com.badlogic.gdx.math.Vector2 linearVelocity -> g
    float[] tmp -> b
    com.badlogic.gdx.math.Vector2 position -> f
    void applyLinearImpulse(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,boolean) -> a
    com.badlogic.gdx.physics.box2d.Fixture createFixture(com.badlogic.gdx.physics.box2d.FixtureDef) -> a
    com.badlogic.gdx.physics.box2d.Fixture createFixture(com.badlogic.gdx.physics.box2d.Shape,float) -> a
    void destroyFixture(com.badlogic.gdx.physics.box2d.Fixture) -> a
    com.badlogic.gdx.utils.Array getFixtureList() -> a
    void reset(long) -> a
    void setLinearVelocity(float,float) -> a
    void setLinearVelocity(com.badlogic.gdx.math.Vector2) -> a
    void setUserData(java.lang.Object) -> a
    com.badlogic.gdx.utils.Array getJointList() -> b
    com.badlogic.gdx.math.Vector2 getLinearVelocity() -> c
    com.badlogic.gdx.math.Vector2 getPosition() -> d
com.badlogic.gdx.physics.box2d.BodyDef -> com.badlogic.gdx.physics.box2d.a:
    boolean awake -> i
    float angularDamping -> g
    boolean fixedRotation -> j
    float linearDamping -> f
    boolean bullet -> k
    float angularVelocity -> e
    boolean active -> l
    float angle -> c
    com.badlogic.gdx.math.Vector2 linearVelocity -> d
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType type -> a
    com.badlogic.gdx.math.Vector2 position -> b
    boolean allowSleep -> h
    float gravityScale -> m
com.badlogic.gdx.physics.box2d.BodyDef$BodyType -> com.badlogic.gdx.physics.box2d.a$a:
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType DynamicBody -> d
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType KinematicBody -> c
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType StaticBody -> b
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType[] $VALUES -> e
    int value -> a
    int getValue() -> a
com.badlogic.gdx.physics.box2d.Contact -> com.badlogic.gdx.physics.box2d.Contact:
    long addr -> a
    com.badlogic.gdx.physics.box2d.World world -> b
    com.badlogic.gdx.physics.box2d.Fixture getFixtureA() -> a
    com.badlogic.gdx.physics.box2d.Fixture getFixtureB() -> b
com.badlogic.gdx.physics.box2d.ContactFilter -> com.badlogic.gdx.physics.box2d.b:
    boolean shouldCollide(com.badlogic.gdx.physics.box2d.Fixture,com.badlogic.gdx.physics.box2d.Fixture) -> a
com.badlogic.gdx.physics.box2d.ContactImpulse -> com.badlogic.gdx.physics.box2d.ContactImpulse:
    long addr -> a
com.badlogic.gdx.physics.box2d.ContactListener -> com.badlogic.gdx.physics.box2d.c:
    void beginContact(com.badlogic.gdx.physics.box2d.Contact) -> a
    void postSolve(com.badlogic.gdx.physics.box2d.Contact,com.badlogic.gdx.physics.box2d.ContactImpulse) -> a
    void preSolve(com.badlogic.gdx.physics.box2d.Contact,com.badlogic.gdx.physics.box2d.Manifold) -> a
    void endContact(com.badlogic.gdx.physics.box2d.Contact) -> b
com.badlogic.gdx.physics.box2d.Filter -> com.badlogic.gdx.physics.box2d.d:
    short groupIndex -> c
    short categoryBits -> a
    short maskBits -> b
com.badlogic.gdx.physics.box2d.Fixture -> com.badlogic.gdx.physics.box2d.Fixture:
    com.badlogic.gdx.physics.box2d.Filter filter -> e
    long addr -> b
    java.lang.Object userData -> c
    short[] tmp -> d
    com.badlogic.gdx.physics.box2d.Body body -> a
    com.badlogic.gdx.physics.box2d.Body getBody() -> a
    void reset(com.badlogic.gdx.physics.box2d.Body,long) -> a
    void setUserData(java.lang.Object) -> a
    com.badlogic.gdx.physics.box2d.Filter getFilterData() -> b
    java.lang.Object getUserData() -> c
com.badlogic.gdx.physics.box2d.FixtureDef -> com.badlogic.gdx.physics.box2d.e:
    com.badlogic.gdx.physics.box2d.Filter filter -> f
    com.badlogic.gdx.physics.box2d.Shape shape -> a
    float density -> d
    boolean isSensor -> e
    float restitution -> c
    float friction -> b
com.badlogic.gdx.physics.box2d.Joint -> com.badlogic.gdx.physics.box2d.Joint:
    com.badlogic.gdx.physics.box2d.JointEdge jointEdgeB -> c
    com.badlogic.gdx.physics.box2d.JointEdge jointEdgeA -> b
    long addr -> a
    void setUserData(java.lang.Object) -> a
com.badlogic.gdx.physics.box2d.JointEdge -> com.badlogic.gdx.physics.box2d.f:
    com.badlogic.gdx.physics.box2d.Joint joint -> b
    com.badlogic.gdx.physics.box2d.Body other -> a
com.badlogic.gdx.physics.box2d.Manifold -> com.badlogic.gdx.physics.box2d.Manifold:
    long addr -> a
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint -> com.badlogic.gdx.physics.box2d.Manifold$a:
    com.badlogic.gdx.math.Vector2 localPoint -> a
    float tangentImpulse -> c
    float normalImpulse -> b
    int contactID -> d
com.badlogic.gdx.physics.box2d.MassData -> com.badlogic.gdx.physics.box2d.g:
com.badlogic.gdx.physics.box2d.PolygonShape -> com.badlogic.gdx.physics.box2d.PolygonShape:
    void setAsBox(float,float) -> a
com.badlogic.gdx.physics.box2d.QueryCallback -> com.badlogic.gdx.physics.box2d.h:
    boolean reportFixture(com.badlogic.gdx.physics.box2d.Fixture) -> a
com.badlogic.gdx.physics.box2d.RayCastCallback -> com.badlogic.gdx.physics.box2d.i:
    float reportRayFixture(com.badlogic.gdx.physics.box2d.Fixture,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float) -> a
com.badlogic.gdx.physics.box2d.Shape -> com.badlogic.gdx.physics.box2d.Shape:
    long addr -> a
    void dispose() -> a
    void setRadius(float) -> a
com.badlogic.gdx.physics.box2d.Transform -> com.badlogic.gdx.physics.box2d.j:
com.badlogic.gdx.physics.box2d.World -> com.badlogic.gdx.physics.box2d.World:
    com.badlogic.gdx.utils.Pool freeBodies -> a
    com.badlogic.gdx.utils.Pool freeFixtures -> b
    com.badlogic.gdx.math.Vector2 rayPoint -> q
    com.badlogic.gdx.math.Vector2 rayNormal -> r
    com.badlogic.gdx.physics.box2d.ContactFilter contactFilter -> g
    com.badlogic.gdx.utils.LongMap fixtures -> e
    com.badlogic.gdx.utils.LongMap joints -> f
    long addr -> c
    com.badlogic.gdx.physics.box2d.RayCastCallback rayCastCallback -> p
    com.badlogic.gdx.physics.box2d.QueryCallback queryCallback -> i
    com.badlogic.gdx.physics.box2d.Manifold manifold -> n
    com.badlogic.gdx.utils.LongMap bodies -> d
    com.badlogic.gdx.physics.box2d.ContactListener contactListener -> h
    long[] contactAddrs -> j
    com.badlogic.gdx.utils.Array freeContacts -> l
    com.badlogic.gdx.utils.Array contacts -> k
    com.badlogic.gdx.physics.box2d.ContactImpulse impulse -> o
    com.badlogic.gdx.physics.box2d.Contact contact -> m
    com.badlogic.gdx.physics.box2d.Body createBody(com.badlogic.gdx.physics.box2d.BodyDef) -> a
    void destroyBody(com.badlogic.gdx.physics.box2d.Body) -> a
    void destroyFixture(com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.physics.box2d.Fixture) -> a
    void destroyJoint(com.badlogic.gdx.physics.box2d.Joint) -> a
    void setContactListener(com.badlogic.gdx.physics.box2d.ContactListener) -> a
    void step(float,int,int) -> a
com.badlogic.gdx.physics.box2d.World$1 -> com.badlogic.gdx.physics.box2d.World$a:
    com.badlogic.gdx.physics.box2d.World this$0 -> d
    com.badlogic.gdx.physics.box2d.Body newObject() -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.physics.box2d.World$2 -> com.badlogic.gdx.physics.box2d.World$b:
    com.badlogic.gdx.physics.box2d.Fixture newObject() -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.physics.box2d.WorldManifold -> com.badlogic.gdx.physics.box2d.k:
com.badlogic.gdx.scenes.scene2d.Action -> a.a.a.v.a.a:
    com.badlogic.gdx.utils.Pool pool -> b
    com.badlogic.gdx.scenes.scene2d.Actor target -> a
    boolean act(float) -> a
    void reset() -> a
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void restart() -> b
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> b
com.badlogic.gdx.scenes.scene2d.Actor -> a.a.a.v.a.b:
    float width -> l
    java.lang.String name -> f
    float y -> k
    float x -> j
    boolean debug -> i
    com.badlogic.gdx.scenes.scene2d.Touchable touchable -> g
    com.badlogic.gdx.scenes.scene2d.Group parent -> b
    com.badlogic.gdx.utils.DelayedRemovalArray listeners -> c
    com.badlogic.gdx.utils.DelayedRemovalArray captureListeners -> d
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    com.badlogic.gdx.utils.Array actions -> e
    float rotation -> r
    boolean visible -> h
    float scaleY -> q
    float scaleX -> p
    float originY -> o
    float originX -> n
    com.badlogic.gdx.graphics.Color color -> s
    float height -> m
    void act(float) -> a
    boolean clipBegin(float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> a
    boolean fire(com.badlogic.gdx.scenes.scene2d.Event) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    boolean isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    boolean notify(com.badlogic.gdx.scenes.scene2d.Event,boolean) -> a
    com.badlogic.gdx.math.Vector2 parentToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> a
    void setDebug(boolean) -> a
    void setParent(com.badlogic.gdx.scenes.scene2d.Group) -> a
    void setPosition(float,float) -> a
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    void setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable) -> a
    void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> b
    void setBounds(float,float,float,float) -> b
    void setHeight(float) -> b
    void setSize(float,float) -> b
    void setWidth(float) -> c
    void clipEnd() -> i
    com.badlogic.gdx.graphics.Color getColor() -> j
    boolean getDebug() -> k
    float getHeight() -> l
    com.badlogic.gdx.scenes.scene2d.Group getParent() -> m
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> n
    com.badlogic.gdx.scenes.scene2d.Touchable getTouchable() -> o
    float getWidth() -> p
    float getX() -> q
    float getY() -> r
    boolean isVisible() -> s
    void positionChanged() -> t
    boolean remove() -> u
    void sizeChanged() -> v
com.badlogic.gdx.scenes.scene2d.Event -> a.a.a.v.a.c:
    com.badlogic.gdx.scenes.scene2d.Actor targetActor -> b
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    boolean stopped -> e
    boolean cancelled -> f
    boolean bubbles -> c
    boolean handled -> d
    void reset() -> a
    void setCapture(boolean) -> a
    void setListenerActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    boolean getBubbles() -> b
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> c
    com.badlogic.gdx.scenes.scene2d.Actor getTarget() -> d
    void handle() -> e
    boolean isCancelled() -> f
    boolean isHandled() -> g
    boolean isStopped() -> h
com.badlogic.gdx.scenes.scene2d.EventListener -> a.a.a.v.a.d:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
com.badlogic.gdx.scenes.scene2d.Group -> a.a.a.v.a.e:
    com.badlogic.gdx.utils.SnapshotArray children -> t
    com.badlogic.gdx.math.Matrix4 oldTransform -> w
    com.badlogic.gdx.math.Rectangle cullingArea -> y
    com.badlogic.gdx.math.Matrix4 computedTransform -> v
    com.badlogic.gdx.math.Affine2 worldTransform -> u
    com.badlogic.gdx.math.Vector2 tmp -> z
    boolean transform -> x
    boolean isTransform() -> A
    void act(float) -> a
    void applyTransform(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.math.Matrix4) -> a
    void applyTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer,com.badlogic.gdx.math.Matrix4) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> a
    com.badlogic.gdx.scenes.scene2d.Actor removeActorAt(int,boolean) -> a
    void resetTransform(com.badlogic.gdx.graphics.g2d.Batch) -> a
    void setDebug(boolean,boolean) -> a
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    void toString(java.lang.StringBuilder,int) -> a
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    void drawChildren(com.badlogic.gdx.graphics.g2d.Batch,float) -> b
    void setTransform(boolean) -> b
    void drawDebugChildren(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> c
    void resetTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> d
    void childrenChanged() -> w
    com.badlogic.gdx.math.Matrix4 computeTransform() -> x
    com.badlogic.gdx.scenes.scene2d.Group debugAll() -> y
    com.badlogic.gdx.utils.SnapshotArray getChildren() -> z
com.badlogic.gdx.scenes.scene2d.InputEvent -> a.a.a.v.a.f:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type type -> g
    void reset() -> a
    void setButton(int) -> a
    void setCharacter(char) -> a
    void setScrollAmountX(float) -> a
    void setType(com.badlogic.gdx.scenes.scene2d.InputEvent$Type) -> a
    void setKeyCode(int) -> b
    void setScrollAmountY(float) -> b
    void setPointer(int) -> c
    void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    void setStageX(float) -> c
    void setStageY(float) -> d
com.badlogic.gdx.scenes.scene2d.InputEvent$Type -> a.a.a.v.a.f$a:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDown -> a
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchUp -> b
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type scrolled -> g
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyDown -> h
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyUp -> i
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyTyped -> j
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDragged -> c
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type mouseMoved -> d
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type enter -> e
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] $VALUES -> k
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type exit -> f
com.badlogic.gdx.scenes.scene2d.Stage -> a.a.a.v.a.g:
    boolean actionsRequestRendering -> o
    int mouseScreenY -> j
    com.badlogic.gdx.graphics.glutils.ShapeRenderer debugShapes -> p
    int mouseScreenX -> i
    com.badlogic.gdx.graphics.g2d.Batch batch -> b
    boolean debug -> v
    boolean debugAll -> q
    boolean debugUnderMouse -> r
    boolean debugParentUnderMouse -> s
    com.badlogic.gdx.scenes.scene2d.Group root -> c
    com.badlogic.gdx.graphics.Color debugColor -> u
    com.badlogic.gdx.math.Vector2 tempCoords -> d
    int[] pointerScreenX -> g
    com.badlogic.gdx.scenes.scene2d.Actor[] pointerOverActors -> e
    int[] pointerScreenY -> h
    com.badlogic.gdx.utils.viewport.Viewport viewport -> a
    boolean[] pointerTouched -> f
    com.badlogic.gdx.utils.SnapshotArray touchFocuses -> n
    com.badlogic.gdx.scenes.scene2d.Actor scrollFocus -> m
    com.badlogic.gdx.scenes.scene2d.Actor keyboardFocus -> l
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug debugTableUnderMouse -> t
    com.badlogic.gdx.scenes.scene2d.Actor mouseOverActor -> k
    void drawDebug() -> A
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void calculateScissors(com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
    void disableDebug(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    com.badlogic.gdx.scenes.scene2d.Actor fireEnterAndExit(com.badlogic.gdx.scenes.scene2d.Actor,int,int,int) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    boolean keyDown(int) -> a
    boolean keyTyped(char) -> a
    boolean mouseMoved(int,int) -> a
    com.badlogic.gdx.math.Vector2 screenToStageCoordinates(com.badlogic.gdx.math.Vector2) -> a
    boolean scrolled(float,float) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchDragged(int,int,int) -> a
    void act(float) -> b
    void cancelTouchFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean isInsideViewport(int,int) -> b
    boolean keyUp(int) -> b
    boolean touchUp(int,int,int,int) -> b
    boolean setKeyboardFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    boolean setScrollFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> d
    void unfocus(com.badlogic.gdx.scenes.scene2d.Actor) -> e
    void draw() -> r
    boolean getActionsRequestRendering() -> s
    com.badlogic.gdx.utils.Array getActors() -> t
    com.badlogic.gdx.graphics.Camera getCamera() -> u
    com.badlogic.gdx.graphics.Color getDebugColor() -> v
    float getHeight() -> w
    com.badlogic.gdx.scenes.scene2d.Group getRoot() -> x
    com.badlogic.gdx.utils.viewport.Viewport getViewport() -> y
    float getWidth() -> z
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus -> a.a.a.v.a.g$a:
    com.badlogic.gdx.scenes.scene2d.Actor target -> c
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> b
    int pointer -> d
    int button -> e
    com.badlogic.gdx.scenes.scene2d.EventListener listener -> a
    void reset() -> a
com.badlogic.gdx.scenes.scene2d.Touchable -> a.a.a.v.a.h:
    com.badlogic.gdx.scenes.scene2d.Touchable[] $VALUES -> d
    com.badlogic.gdx.scenes.scene2d.Touchable disabled -> b
    com.badlogic.gdx.scenes.scene2d.Touchable childrenOnly -> c
    com.badlogic.gdx.scenes.scene2d.Touchable enabled -> a
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle -> a.a.a.v.a.i.a:
com.badlogic.gdx.scenes.scene2d.ui.Cell -> a.a.a.v.a.i.b:
    com.badlogic.gdx.scenes.scene2d.ui.Value minWidth -> a
    com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth -> c
    float computedPadBottom -> H
    com.badlogic.gdx.scenes.scene2d.ui.Cell defaults -> O
    float computedPadTop -> F
    com.badlogic.gdx.Files files -> N
    int cellAboveIndex -> E
    int column -> C
    java.lang.Float fillY -> p
    java.lang.Integer colspan -> t
    java.lang.Boolean uniformY -> v
    float actorY -> y
    com.badlogic.gdx.scenes.scene2d.ui.Value padBottom -> m
    java.lang.Integer zeroi -> K
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceBottom -> i
    java.lang.Integer centeri -> M
    com.badlogic.gdx.scenes.scene2d.ui.Value padTop -> k
    com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth -> e
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceTop -> g
    java.lang.Integer expandX -> r
    com.badlogic.gdx.scenes.scene2d.ui.Value minHeight -> b
    float computedPadRight -> I
    float computedPadLeft -> G
    int row -> D
    float actorHeight -> A
    java.lang.Float fillX -> o
    java.lang.Integer expandY -> s
    java.lang.Boolean uniformX -> u
    float actorWidth -> z
    float actorX -> x
    com.badlogic.gdx.scenes.scene2d.ui.Value padLeft -> l
    com.badlogic.gdx.scenes.scene2d.Actor actor -> w
    java.lang.Float zerof -> J
    com.badlogic.gdx.scenes.scene2d.ui.Value padRight -> n
    java.lang.Integer onei -> L
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceLeft -> h
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceRight -> j
    com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight -> d
    boolean endRow -> B
    java.lang.Integer align -> q
    com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight -> f
    void reset() -> a
    void set(com.badlogic.gdx.scenes.scene2d.ui.Cell) -> a
    void setTable(com.badlogic.gdx.scenes.scene2d.ui.Table) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Cell defaults() -> b
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle -> a.a.a.v.a.i.c:
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle -> a.a.a.v.a.i.d:
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle -> a.a.a.v.a.i.e:
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle -> a.a.a.v.a.i.f:
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle -> a.a.a.v.a.i.g:
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle -> a.a.a.v.a.i.h:
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle -> a.a.a.v.a.i.i:
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle -> a.a.a.v.a.i.j:
com.badlogic.gdx.scenes.scene2d.ui.Skin -> a.a.a.v.a.i.k:
com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable -> a.a.a.v.a.i.k$a:
com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle -> a.a.a.v.a.i.l:
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle -> a.a.a.v.a.i.m:
com.badlogic.gdx.scenes.scene2d.ui.Table -> a.a.a.v.a.i.n:
    float tableMinWidth -> L
    float[] rowPrefHeight -> K
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundRight -> m0
    float[] rowMinHeight -> I
    boolean clip -> b0
    boolean round -> c0
    int rows -> E
    com.badlogic.gdx.scenes.scene2d.ui.Value padLeft -> U
    com.badlogic.gdx.scenes.scene2d.ui.Value padRight -> W
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug debug -> Y
    int align -> X
    boolean sizeInvalid -> G
    float[] expandHeight -> S
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundBottom -> l0
    float[] rowHeight -> Q
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundLeft -> k0
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundTop -> j0
    float tablePrefWidth -> N
    com.badlogic.gdx.utils.Array debugRects -> Z
    float[] columnWeightedWidth -> h0
    float[] rowWeightedHeight -> i0
    float[] columnPrefWidth -> J
    float[] columnMinWidth -> H
    com.badlogic.gdx.graphics.Color debugCellColor -> e0
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> a0
    com.badlogic.gdx.graphics.Color debugActorColor -> f0
    int columns -> D
    com.badlogic.gdx.scenes.scene2d.ui.Value padTop -> T
    com.badlogic.gdx.scenes.scene2d.ui.Value padBottom -> V
    com.badlogic.gdx.graphics.Color debugTableColor -> d0
    float tablePrefHeight -> O
    float[] expandWidth -> R
    com.badlogic.gdx.utils.Pool cellPool -> g0
    com.badlogic.gdx.utils.Array cells -> F
    float tableMinHeight -> M
    float[] columnWidth -> P
    void invalidate() -> B
    void layout() -> C
    void clearDebugRects() -> D
    void computeSize() -> E
    void endRow() -> F
    com.badlogic.gdx.scenes.scene2d.ui.Cell obtainCell() -> G
    void addDebugRect(float,float,float,float,com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void drawBackground(com.badlogic.gdx.graphics.g2d.Batch,float,float,float) -> a
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> a
    float[] ensureSize(float[],int) -> a
    float getMinHeight() -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> a
    com.badlogic.gdx.scenes.scene2d.Actor removeActorAt(int,boolean) -> a
    void setDebug(boolean) -> a
    void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> b
    float getMinWidth() -> b
    void addDebugRects(float,float,float,float) -> c
    com.badlogic.gdx.scenes.scene2d.ui.Cell getCell(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    void drawDebugRects(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> e
    float getPrefHeight() -> g
    float getPrefWidth() -> h
    com.badlogic.gdx.scenes.scene2d.Group debugAll() -> y
    com.badlogic.gdx.scenes.scene2d.ui.Table debugAll() -> y
com.badlogic.gdx.scenes.scene2d.ui.Table$1 -> a.a.a.v.a.i.n$a:
    com.badlogic.gdx.scenes.scene2d.ui.Cell newObject() -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$2 -> a.a.a.v.a.i.n$b:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$3 -> a.a.a.v.a.i.n$c:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$4 -> a.a.a.v.a.i.n$d:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$5 -> a.a.a.v.a.i.n$e:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug -> a.a.a.v.a.i.n$f:
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug[] $VALUES -> f
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug actor -> e
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug cell -> d
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug none -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug table -> c
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug all -> b
com.badlogic.gdx.scenes.scene2d.ui.Table$DebugRect -> a.a.a.v.a.i.n$g:
    com.badlogic.gdx.graphics.Color color -> f
    com.badlogic.gdx.utils.Pool pool -> g
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle -> a.a.a.v.a.i.o:
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle -> a.a.a.v.a.i.p:
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle -> a.a.a.v.a.i.q:
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle -> a.a.a.v.a.i.r:
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle -> a.a.a.v.a.i.s:
com.badlogic.gdx.scenes.scene2d.ui.Value -> a.a.a.v.a.i.t:
    com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed zero -> a
    com.badlogic.gdx.scenes.scene2d.ui.Value minHeight -> c
    com.badlogic.gdx.scenes.scene2d.ui.Value minWidth -> b
    com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight -> e
    com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth -> d
    com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight -> g
    com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth -> f
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$1 -> a.a.a.v.a.i.t$a:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$2 -> a.a.a.v.a.i.t$b:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$3 -> a.a.a.v.a.i.t$c:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$4 -> a.a.a.v.a.i.t$d:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$5 -> a.a.a.v.a.i.t$e:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$6 -> a.a.a.v.a.i.t$f:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed -> a.a.a.v.a.i.t$g:
    float value -> h
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup -> a.a.a.v.a.i.u:
    boolean needsLayout -> A
    boolean fillParent -> B
    boolean layoutEnabled -> C
    void invalidate() -> B
    void layout() -> C
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    float getMaxHeight() -> c
    void invalidateHierarchy() -> d
    float getMaxWidth() -> e
    void validate() -> f
    void sizeChanged() -> v
    void childrenChanged() -> w
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle -> a.a.a.v.a.i.v:
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable -> a.a.a.v.a.j.a:
    float minHeight -> g
    float minWidth -> f
    float bottomHeight -> e
    float topHeight -> d
    float rightWidth -> c
    java.lang.String name -> a
    float leftWidth -> b
    float getMinHeight() -> a
    float getMinWidth() -> b
    float getRightWidth() -> c
    float getLeftWidth() -> d
    float getBottomHeight() -> e
    float getTopHeight() -> f
com.badlogic.gdx.scenes.scene2d.utils.Cullable -> a.a.a.v.a.j.b:
com.badlogic.gdx.scenes.scene2d.utils.Drawable -> a.a.a.v.a.j.c:
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    float getMinHeight() -> a
    float getMinWidth() -> b
    float getRightWidth() -> c
    float getLeftWidth() -> d
    float getBottomHeight() -> e
    float getTopHeight() -> f
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent -> a.a.a.v.a.j.d:
    void reset() -> a
    void setType(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type) -> a
    void setFocused(boolean) -> b
    void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type -> a.a.a.v.a.j.d$a:
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type keyboard -> a
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type scroll -> b
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type[] $VALUES -> c
com.badlogic.gdx.scenes.scene2d.utils.Layout -> a.a.a.v.a.j.e:
    float getMinHeight() -> a
    float getMinWidth() -> b
    float getMaxHeight() -> c
    void invalidateHierarchy() -> d
    float getMaxWidth() -> e
    void validate() -> f
    float getPrefHeight() -> g
    float getPrefWidth() -> h
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable -> a.a.a.v.a.j.f:
    com.badlogic.gdx.graphics.g2d.NinePatch patch -> h
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack -> a.a.a.v.a.j.g:
    com.badlogic.gdx.math.Vector3 tmp -> b
    com.badlogic.gdx.utils.Array scissors -> a
    void calculateScissors(com.badlogic.gdx.graphics.Camera,float,float,float,float,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
    void fix(com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.math.Rectangle popScissors() -> a
    boolean pushScissors(com.badlogic.gdx.math.Rectangle) -> b
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable -> a.a.a.v.a.j.h:
    com.badlogic.gdx.graphics.g2d.Sprite sprite -> h
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable -> a.a.a.v.a.j.i:
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> h
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion() -> g
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable -> a.a.a.v.a.j.j:
    float scale -> j
    com.badlogic.gdx.graphics.Color color -> i
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable -> a.a.a.v.a.j.k:
com.badlogic.gdx.utils.Array -> com.badlogic.gdx.utils.a:
    com.badlogic.gdx.utils.Array$ArrayIterable iterable -> d
    java.lang.Object[] items -> a
    int size -> b
    boolean ordered -> c
    void add(java.lang.Object) -> a
    void addAll(com.badlogic.gdx.utils.Array) -> a
    void addAll(com.badlogic.gdx.utils.Array,int,int) -> a
    void addAll(java.lang.Object[],int,int) -> a
    void clear() -> a
    boolean contains(java.lang.Object,boolean) -> a
    java.lang.Object[] ensureCapacity(int) -> a
    void removeRange(int,int) -> a
    com.badlogic.gdx.utils.Array with(java.lang.Object[]) -> a
    java.lang.Object first() -> b
    java.lang.Object get(int) -> b
    int indexOf(java.lang.Object,boolean) -> b
    java.lang.Object peek() -> c
    java.lang.Object removeIndex(int) -> c
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object pop() -> d
    java.lang.Object[] resize(int) -> d
    void truncate(int) -> e
com.badlogic.gdx.utils.Array$ArrayIterable -> com.badlogic.gdx.utils.a$a:
    com.badlogic.gdx.utils.Array array -> a
    com.badlogic.gdx.utils.Array$ArrayIterator iterator2 -> d
    com.badlogic.gdx.utils.Array$ArrayIterator iterator1 -> c
    boolean allowRemove -> b
com.badlogic.gdx.utils.Array$ArrayIterator -> com.badlogic.gdx.utils.a$b:
    com.badlogic.gdx.utils.Array array -> a
    boolean allowRemove -> b
    int index -> c
    boolean valid -> d
com.badlogic.gdx.utils.BufferUtils -> com.badlogic.gdx.utils.BufferUtils:
    com.badlogic.gdx.utils.Array unsafeBuffers -> a
    int allocatedUnsafe -> b
    void copy(float[],java.nio.Buffer,int,int) -> a
    void disposeUnsafeByteBuffer(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer newByteBuffer(int) -> a
    java.nio.FloatBuffer newFloatBuffer(int) -> b
    java.nio.IntBuffer newIntBuffer(int) -> c
    java.nio.ByteBuffer newUnsafeByteBuffer(int) -> d
com.badlogic.gdx.utils.Clipboard -> com.badlogic.gdx.utils.b:
com.badlogic.gdx.utils.Collections -> com.badlogic.gdx.utils.c:
    boolean allocateIterators -> a
com.badlogic.gdx.utils.DelayedRemovalArray -> com.badlogic.gdx.utils.d:
    com.badlogic.gdx.utils.IntArray remove -> f
    int clear -> g
    int iterating -> e
    void clear() -> a
    void removeRange(int,int) -> a
    java.lang.Object removeIndex(int) -> c
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object pop() -> d
    void begin() -> e
    void truncate(int) -> e
    void end() -> f
    void remove(int) -> f
com.badlogic.gdx.utils.Disposable -> com.badlogic.gdx.utils.e:
    void dispose() -> a
com.badlogic.gdx.utils.FloatArray -> com.badlogic.gdx.utils.f:
    float[] items -> a
    int size -> b
    boolean ordered -> c
    void add(float) -> a
    void addAll(com.badlogic.gdx.utils.FloatArray) -> a
    void addAll(com.badlogic.gdx.utils.FloatArray,int,int) -> a
    void addAll(float[],int,int) -> a
    void clear() -> a
    float[] ensureCapacity(int) -> a
    void removeRange(int,int) -> a
    float get(int) -> b
    float[] resize(int) -> c
    void truncate(int) -> d
com.badlogic.gdx.utils.GdxNativesLoader -> com.badlogic.gdx.utils.g:
    boolean disableNativesLoading -> a
    boolean nativesLoaded -> b
    void load() -> a
com.badlogic.gdx.utils.GdxRuntimeException -> com.badlogic.gdx.utils.h:
com.badlogic.gdx.utils.IntArray -> com.badlogic.gdx.utils.i:
    int[] items -> a
    int size -> b
    boolean ordered -> c
    void add(int) -> a
    void clear() -> a
    void insert(int,int) -> a
    int[] ensureCapacity(int) -> b
    int pop() -> b
    int get(int) -> c
    int[] resize(int) -> d
com.badlogic.gdx.utils.IntSet -> com.badlogic.gdx.utils.j:
    int[] keyTable -> b
    float loadFactor -> d
    int shift -> f
    int mask -> g
    int threshold -> e
    boolean hasZeroValue -> c
    int size -> a
    boolean add(int) -> a
    boolean contains(int) -> b
    int place(int) -> c
    void addResize(int) -> d
    int locateKey(int) -> e
    void resize(int) -> f
com.badlogic.gdx.utils.LongMap -> com.badlogic.gdx.utils.k:
    com.badlogic.gdx.utils.LongMap$Entries entries2 -> k
    com.badlogic.gdx.utils.LongMap$Entries entries1 -> j
    java.lang.Object[] valueTable -> c
    java.lang.Object zeroValue -> d
    float loadFactor -> f
    int shift -> h
    long[] keyTable -> b
    int mask -> i
    boolean hasZeroValue -> e
    int threshold -> g
    int size -> a
    com.badlogic.gdx.utils.LongMap$Entries entries() -> a
    java.lang.Object get(long) -> a
    java.lang.Object get(long,java.lang.Object) -> a
    void resize(int) -> a
    int place(long) -> b
    java.lang.Object put(long,java.lang.Object) -> b
    void putResize(long,java.lang.Object) -> c
    java.lang.Object remove(long) -> c
    int locateKey(long) -> d
com.badlogic.gdx.utils.LongMap$Entries -> com.badlogic.gdx.utils.k$a:
    com.badlogic.gdx.utils.LongMap$Entry entry -> f
    void reset() -> b
com.badlogic.gdx.utils.LongMap$Entry -> com.badlogic.gdx.utils.k$b:
    java.lang.Object value -> b
    long key -> a
com.badlogic.gdx.utils.LongMap$MapIterator -> com.badlogic.gdx.utils.k$c:
    boolean valid -> e
    int currentIndex -> d
    boolean hasNext -> a
    com.badlogic.gdx.utils.LongMap map -> b
    int nextIndex -> c
    void findNextIndex() -> a
    void reset() -> b
com.badlogic.gdx.utils.NumberUtils -> com.badlogic.gdx.utils.l:
    int floatToIntBits(float) -> a
    float intToFloatColor(int) -> a
    int floatToIntColor(float) -> b
    int floatToRawIntBits(float) -> c
com.badlogic.gdx.utils.ObjectIntMap -> com.badlogic.gdx.utils.m:
    java.lang.Object[] keyTable -> b
    int[] valueTable -> c
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries1 -> h
    float loadFactor -> d
    int shift -> f
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries2 -> i
    int mask -> g
    int threshold -> e
    int size -> a
    boolean containsKey(java.lang.Object) -> a
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries() -> a
    int get(java.lang.Object,int) -> a
    void resize(int) -> a
    java.lang.String toString(java.lang.String,boolean) -> a
    int locateKey(java.lang.Object) -> b
    void put(java.lang.Object,int) -> b
    int place(java.lang.Object) -> c
    void putResize(java.lang.Object,int) -> c
com.badlogic.gdx.utils.ObjectIntMap$Entries -> com.badlogic.gdx.utils.m$a:
    com.badlogic.gdx.utils.ObjectIntMap$Entry entry -> f
    void reset() -> b
com.badlogic.gdx.utils.ObjectIntMap$Entry -> com.badlogic.gdx.utils.m$b:
    java.lang.Object key -> a
    int value -> b
com.badlogic.gdx.utils.ObjectIntMap$MapIterator -> com.badlogic.gdx.utils.m$c:
    boolean valid -> e
    int currentIndex -> d
    com.badlogic.gdx.utils.ObjectIntMap map -> b
    boolean hasNext -> a
    int nextIndex -> c
    void findNextIndex() -> a
    void reset() -> b
com.badlogic.gdx.utils.ObjectMap -> com.badlogic.gdx.utils.n:
    java.lang.Object[] keyTable -> b
    java.lang.Object[] valueTable -> c
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> h
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> i
    float loadFactor -> d
    int shift -> f
    int mask -> g
    int threshold -> e
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> j
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> k
    java.lang.Object dummy -> l
    int size -> a
    void clear() -> a
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object get(java.lang.Object,java.lang.Object) -> a
    void resize(int) -> a
    java.lang.String toString(java.lang.String,boolean) -> a
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> b
    int locateKey(java.lang.Object) -> b
    java.lang.Object put(java.lang.Object,java.lang.Object) -> b
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> c
    int place(java.lang.Object) -> c
    void putResize(java.lang.Object,java.lang.Object) -> c
    java.lang.Object remove(java.lang.Object) -> d
com.badlogic.gdx.utils.ObjectMap$Entries -> com.badlogic.gdx.utils.n$a:
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> f
    void reset() -> b
com.badlogic.gdx.utils.ObjectMap$Entry -> com.badlogic.gdx.utils.n$b:
    java.lang.Object value -> b
    java.lang.Object key -> a
com.badlogic.gdx.utils.ObjectMap$Keys -> com.badlogic.gdx.utils.n$c:
    void reset() -> b
com.badlogic.gdx.utils.ObjectMap$MapIterator -> com.badlogic.gdx.utils.n$d:
    boolean valid -> e
    int currentIndex -> d
    boolean hasNext -> a
    int nextIndex -> c
    com.badlogic.gdx.utils.ObjectMap map -> b
    void findNextIndex() -> a
    void reset() -> b
com.badlogic.gdx.utils.ObjectSet -> com.badlogic.gdx.utils.o:
    int tableSize(int,float) -> a
com.badlogic.gdx.utils.Pool -> com.badlogic.gdx.utils.p:
    com.badlogic.gdx.utils.Array freeObjects -> c
    int peak -> b
    int max -> a
    void free(java.lang.Object) -> a
    void freeAll(com.badlogic.gdx.utils.Array) -> a
    java.lang.Object newObject() -> a
    java.lang.Object obtain() -> b
    void reset(java.lang.Object) -> b
com.badlogic.gdx.utils.Pool$Poolable -> com.badlogic.gdx.utils.p$a:
    void reset() -> a
com.badlogic.gdx.utils.Pools -> com.badlogic.gdx.utils.q:
    com.badlogic.gdx.utils.ObjectMap typePools -> a
    void free(java.lang.Object) -> a
    void freeAll(com.badlogic.gdx.utils.Array,boolean) -> a
    com.badlogic.gdx.utils.Pool get(java.lang.Class) -> a
    com.badlogic.gdx.utils.Pool get(java.lang.Class,int) -> a
    java.lang.Object obtain(java.lang.Class) -> b
com.badlogic.gdx.utils.ReflectionPool -> com.badlogic.gdx.utils.r:
    com.badlogic.gdx.utils.reflect.Constructor constructor -> d
    com.badlogic.gdx.utils.reflect.Constructor findConstructor(java.lang.Class) -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.utils.Scaling -> com.badlogic.gdx.utils.s:
    com.badlogic.gdx.utils.Scaling stretchX -> g
    com.badlogic.gdx.utils.Scaling stretch -> f
    com.badlogic.gdx.utils.Scaling fillY -> e
    com.badlogic.gdx.utils.Scaling fillX -> d
    com.badlogic.gdx.utils.Scaling fill -> c
    com.badlogic.gdx.utils.Scaling contain -> b
    com.badlogic.gdx.utils.Scaling fit -> a
    com.badlogic.gdx.math.Vector2 temp -> j
    com.badlogic.gdx.utils.Scaling[] $VALUES -> k
    com.badlogic.gdx.utils.Scaling none -> i
    com.badlogic.gdx.utils.Scaling stretchY -> h
    com.badlogic.gdx.math.Vector2 apply(float,float,float,float) -> a
com.badlogic.gdx.utils.Scaling$1 -> com.badlogic.gdx.utils.s$a:
    int[] $SwitchMap$com$badlogic$gdx$utils$Scaling -> a
com.badlogic.gdx.utils.SharedLibraryLoader -> com.badlogic.gdx.utils.t:
    boolean isIos -> e
    boolean isAndroid -> f
    boolean isARM -> g
    java.lang.String nativesJar -> a
    boolean is64Bit -> h
    boolean isWindows -> b
    boolean isLinux -> c
    boolean isMac -> d
    java.util.HashSet loadedLibraries -> i
    java.lang.String crc(java.io.InputStream) -> a
    java.io.File extractFile(java.lang.String,java.lang.String,java.io.File) -> a
    void load(java.lang.String) -> a
    java.lang.Throwable loadFile(java.lang.String,java.lang.String,java.io.File) -> b
    java.lang.String mapLibraryName(java.lang.String) -> b
    boolean isLoaded(java.lang.String) -> c
    void loadFile(java.lang.String) -> d
    java.io.InputStream readFile(java.lang.String) -> e
    void setLoaded(java.lang.String) -> f
com.badlogic.gdx.utils.SnapshotArray -> com.badlogic.gdx.utils.u:
    java.lang.Object[] snapshot -> e
    int snapshots -> g
    java.lang.Object[] recycled -> f
    void clear() -> a
    void removeRange(int,int) -> a
    java.lang.Object removeIndex(int) -> c
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object pop() -> d
    java.lang.Object[] begin() -> e
    void truncate(int) -> e
    void end() -> f
    void modified() -> g
com.badlogic.gdx.utils.StreamUtils -> com.badlogic.gdx.utils.v:
    void closeQuietly(java.io.Closeable) -> a
    void copyStream(java.io.InputStream,java.io.OutputStream) -> a
    void copyStream(java.io.InputStream,java.io.OutputStream,byte[]) -> a
    byte[] copyStreamToByteArray(java.io.InputStream,int) -> a
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream -> com.badlogic.gdx.utils.v$a:
com.badlogic.gdx.utils.StringBuilder -> com.badlogic.gdx.utils.w:
    char[] chars -> a
    char[] digits -> c
    int length -> b
    com.badlogic.gdx.utils.StringBuilder append(float) -> a
    com.badlogic.gdx.utils.StringBuilder append(int) -> a
    com.badlogic.gdx.utils.StringBuilder append(int,int) -> a
    com.badlogic.gdx.utils.StringBuilder append(int,int,char) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.Object) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.String) -> a
    void append0(char) -> a
    void append0(java.lang.CharSequence,int,int) -> a
    void append0(char[],int,int) -> a
    void appendNull() -> a
    void append0(java.lang.String) -> b
    void enlargeBuffer(int) -> b
    java.lang.String substring(int,int) -> b
    int numChars(int,int) -> c
com.badlogic.gdx.utils.TimeUtils -> com.badlogic.gdx.utils.x:
    long nanoTime() -> a
com.badlogic.gdx.utils.Timer -> com.badlogic.gdx.utils.y:
    com.badlogic.gdx.utils.Timer$TimerThread thread -> c
    com.badlogic.gdx.utils.Array tasks -> a
    java.lang.Object threadLock -> b
    void delay(long) -> a
    com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float) -> a
    com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float,float,int) -> a
    void start() -> a
    long update(long,long) -> a
    com.badlogic.gdx.utils.Timer instance() -> b
    com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float) -> b
    com.badlogic.gdx.utils.Timer$TimerThread thread() -> c
com.badlogic.gdx.utils.Timer$Task -> com.badlogic.gdx.utils.y$a:
    com.badlogic.gdx.utils.Timer timer -> e
    long executeTimeMillis -> b
    int repeatCount -> d
    com.badlogic.gdx.Application app -> a
    long intervalMillis -> c
    void cancel() -> a
    boolean isScheduled() -> b
com.badlogic.gdx.utils.Timer$TimerThread -> com.badlogic.gdx.utils.y$b:
    com.badlogic.gdx.utils.Timer instance -> d
    long pauseTimeMillis -> e
    com.badlogic.gdx.utils.Array instances -> c
    com.badlogic.gdx.Files files -> a
    com.badlogic.gdx.Application app -> b
    void dispose() -> a
    void resume() -> b
    void pause() -> c
com.badlogic.gdx.utils.reflect.ArrayReflection -> com.badlogic.gdx.utils.z.a:
    java.lang.Object newInstance(java.lang.Class,int) -> a
com.badlogic.gdx.utils.reflect.ClassReflection -> com.badlogic.gdx.utils.z.b:
    com.badlogic.gdx.utils.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> a
    java.lang.String getSimpleName(java.lang.Class) -> a
    com.badlogic.gdx.utils.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[]) -> b
com.badlogic.gdx.utils.reflect.Constructor -> com.badlogic.gdx.utils.z.c:
    java.lang.reflect.Constructor constructor -> a
    java.lang.Class getDeclaringClass() -> a
    java.lang.Object newInstance(java.lang.Object[]) -> a
    void setAccessible(boolean) -> a
com.badlogic.gdx.utils.reflect.ReflectionException -> com.badlogic.gdx.utils.z.d:
com.badlogic.gdx.utils.viewport.ScalingViewport -> com.badlogic.gdx.utils.a0.a:
    com.badlogic.gdx.utils.Scaling scaling -> i
    void update(int,int,boolean) -> a
com.badlogic.gdx.utils.viewport.Viewport -> com.badlogic.gdx.utils.a0.b:
    com.badlogic.gdx.graphics.Camera camera -> a
    int screenWidth -> f
    float worldHeight -> c
    int screenHeight -> g
    float worldWidth -> b
    int screenX -> d
    int screenY -> e
    com.badlogic.gdx.math.Vector3 tmp -> h
    void apply(boolean) -> a
    void calculateScissors(com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.graphics.Camera getCamera() -> a
    void setCamera(com.badlogic.gdx.graphics.Camera) -> a
    void setScreenBounds(int,int,int,int) -> a
    void setWorldSize(float,float) -> a
    com.badlogic.gdx.math.Vector2 unproject(com.badlogic.gdx.math.Vector2) -> a
    void update(int,int) -> a
    void update(int,int,boolean) -> a
    int getScreenHeight() -> b
    int getScreenWidth() -> c
    int getScreenX() -> d
    int getScreenY() -> e
    float getWorldHeight() -> f
    float getWorldWidth() -> g
com.matias.bouncingbullets.BalaBox2D -> com.matias.bouncingbullets.a:
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void dispose() -> w
    com.badlogic.gdx.physics.box2d.Body getBody() -> x
com.matias.bouncingbullets.BaseActor -> com.matias.bouncingbullets.b:
    com.badlogic.gdx.graphics.Texture texture -> w
    float HEIGHT -> y
    float WIDTH -> x
    com.badlogic.gdx.physics.box2d.Body body -> u
    com.badlogic.gdx.physics.box2d.Fixture fixture -> v
    com.badlogic.gdx.physics.box2d.World world -> t
    void dispose() -> w
com.matias.bouncingbullets.BaseScreen -> com.matias.bouncingbullets.c:
    void hide() -> a
    void resume() -> b
    void pause() -> c
com.matias.bouncingbullets.JugadorBox2D -> com.matias.bouncingbullets.d:
    com.matias.bouncingbullets.PowerUpObject$TipoObj powerUp -> z
    boolean invencible -> B
    int hp -> A
    boolean isInvencible() -> A
    void act(float) -> a
    void addHp(int) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void setPowerUp(com.matias.bouncingbullets.PowerUpObject$TipoObj) -> a
    void setInvencible(boolean) -> b
    com.badlogic.gdx.physics.box2d.Body getBody() -> x
    int getHp() -> y
    com.matias.bouncingbullets.PowerUpObject$TipoObj getPowerUp() -> z
com.matias.bouncingbullets.Main -> com.matias.bouncingbullets.e:
    void create() -> d
com.matias.bouncingbullets.MainGameContactListener -> com.matias.bouncingbullets.f:
    com.matias.bouncingbullets.JugadorBox2D jugador -> a
    void aplicarPowerUp(com.matias.bouncingbullets.PowerUpObject) -> a
    void beginContact(com.badlogic.gdx.physics.box2d.Contact) -> a
    void postSolve(com.badlogic.gdx.physics.box2d.Contact,com.badlogic.gdx.physics.box2d.ContactImpulse) -> a
    void preSolve(com.badlogic.gdx.physics.box2d.Contact,com.badlogic.gdx.physics.box2d.Manifold) -> a
    void endContact(com.badlogic.gdx.physics.box2d.Contact) -> b
com.matias.bouncingbullets.MainGameScreen -> com.matias.bouncingbullets.g:
    int lastSpawnedPowerUp -> n
    com.badlogic.gdx.graphics.Texture mapa -> z
    com.badlogic.gdx.utils.Array powerUps -> t
    float WORLD_WIDTH -> B
    java.lang.Float[] velocidadesX -> b
    com.badlogic.gdx.utils.Array paredesBody -> j
    float lastY -> w
    com.badlogic.gdx.utils.Array borrarBalas -> C
    com.badlogic.gdx.graphics.g2d.Batch batch -> u
    int seg -> s
    int numBalas -> q
    int cronometroInvencible -> o
    long cronometro -> l
    int lastSpawnedBala -> m
    java.lang.Float[] velocidadesY -> c
    com.badlogic.gdx.scenes.scene2d.Stage stage -> e
    com.badlogic.gdx.graphics.Texture textura -> y
    float WORLD_HEIGHT -> A
    com.badlogic.gdx.graphics.g2d.BitmapFont textRenderer -> p
    com.badlogic.gdx.utils.Array paredesFixture -> k
    float offset -> x
    float lastX -> v
    com.matias.bouncingbullets.MainGameContactListener contactListener -> h
    com.badlogic.gdx.physics.box2d.World world -> d
    com.badlogic.gdx.utils.Array balas -> i
    int min -> r
    com.matias.bouncingbullets.BalaBox2D bala -> f
    com.matias.bouncingbullets.JugadorBox2D jugador -> g
    com.badlogic.gdx.graphics.OrthographicCamera camera -> a
    com.matias.bouncingbullets.JugadorBox2D access$000(com.matias.bouncingbullets.MainGameScreen) -> a
    int access$202(com.matias.bouncingbullets.MainGameScreen,int) -> a
    float access$302(com.matias.bouncingbullets.MainGameScreen,float) -> a
    void generarParedes(com.badlogic.gdx.physics.box2d.World) -> a
    void render(float) -> a
    void resize(int,int) -> a
    com.badlogic.gdx.utils.Array access$100(com.matias.bouncingbullets.MainGameScreen) -> b
    float access$402(com.matias.bouncingbullets.MainGameScreen,float) -> b
    float access$300(com.matias.bouncingbullets.MainGameScreen) -> c
    float access$400(com.matias.bouncingbullets.MainGameScreen) -> d
    void show() -> d
    float access$500(com.matias.bouncingbullets.MainGameScreen) -> e
    int getInstanteEnJuego() -> e
    void eliminarBala() -> f
    void generarBala() -> g
    void generarPowerUp() -> h
com.matias.bouncingbullets.MainGameScreen$1 -> com.matias.bouncingbullets.g$a:
    com.matias.bouncingbullets.MainGameScreen this$0 -> a
    boolean fling(float,float,int) -> a
    boolean pan(float,float,float,float) -> a
    boolean panStop(float,float,int,int) -> a
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
    void pinchStop() -> a
    boolean zoom(float,float) -> a
    boolean longPress(float,float) -> b
    boolean touchDown(float,float,int,int) -> b
    boolean tap(float,float,int,int) -> c
com.matias.bouncingbullets.MainGameScreen$6 -> com.matias.bouncingbullets.g$b:
    int[] $SwitchMap$com$matias$bouncingbullets$PowerUpObject$TipoObj -> a
com.matias.bouncingbullets.PowerUpObject -> com.matias.bouncingbullets.h:
    long segSpawn -> z
    com.matias.bouncingbullets.PowerUpObject$TipoObj tipo -> B
    boolean desaparecer -> A
    void act(float) -> a
    void dibujuar(com.badlogic.gdx.graphics.g2d.Batch) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void setDesaparecer(boolean) -> b
    com.matias.bouncingbullets.PowerUpObject$TipoObj getTipo() -> x
    boolean isDesaparecer() -> y
com.matias.bouncingbullets.PowerUpObject$TipoObj -> com.matias.bouncingbullets.h$a:
    com.matias.bouncingbullets.PowerUpObject$TipoObj Boton -> b
    com.matias.bouncingbullets.PowerUpObject$TipoObj[] $VALUES -> d
    com.matias.bouncingbullets.PowerUpObject$TipoObj Corazon -> a
    com.matias.bouncingbullets.PowerUpObject$TipoObj Chaleco -> c
com.matias.bouncingbullets.RocaBox2D -> com.matias.bouncingbullets.i:
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
